
Helpers

		all 			= [0 .. 0xffff];
		letter 			= ['a' .. 'z'] | ['A' .. 'Z'];
		digit 			= ['0' .. '9'];

States 

		normal, comment;

Tokens

		// Palavras reservadas
		{normal} programa 		= 'programa';
		{normal} inicio 		= 'inicio';
		{normal} fim 			= 'fim.';
		{normal} escreva		= 'escreva';
		{normal} leia			= 'leia';
		{normal} enquanto 		= 'enquanto';
		{normal} fim_enquanto	= 'fim enquanto';
		{normal} se 			= 'se';
		{normal} entao 			= 'entao';
		{normal} senao 			= 'senao';
		{normal} fim_se 		= 'fim se';
		{normal} para 			= 'para';
		{normal} de				= 'de';
		{normal} passo			= 'passo';
		{normal} fim_para 		= 'fim para';
		{normal} ate 			= 'ate';
		{normal} faca 			= 'faca';
		{normal} repita 		= 'repita';
		{normal} avalie			= 'avalie';
		{normal} caso 			= 'caso';
		{normal} fim_avalie 	= 'fim avalie';
		{normal} const			= 'const';
		{normal} tipo 			= 'inteiro' | 'real' | 'caractere';

		// Operadores
		{normal} mais 			= '+';
		{normal} menos 			= '-';
		{normal} divisao 		= '/';
		{normal} mult 			= '*';
		{normal} igual			= '=';
		{normal} diferente		= '<>';
		{normal} maior			= '>';
		{normal} menor			= '<';
		{normal} menor_igual	= '<=';
		{normal} maior_igual	= '>=';
		{normal} e				= 'e';
		{normal} ou				= 'ou';
		{normal} xor			= 'xor';
		{normal} nao			= 'nao';
		{normal} atribuicao		= '<-';

		// Símbolos
		{normal} par_d 			= ')';
		{normal} par_e 			= '(';
		{normal} col_d			= ']';
		{normal} col_e			= '[';
		{normal} ponto 			= '.';
		{normal} virgula		= ',';
		{normal} dois_pontos 	= ':';
		{normal} semicolon	 	= ';';


		// Identificador
		{normal} id 			= ('_' | letter)(letter | digit | '_')*;
		{normal} id_array 		= ('_' | letter)(letter | digit | '_')*('[' digit+ ']');
		
		// Tipos
		{normal} n_int 			= digit+;
		{normal} n_real 		= digit* '.' digit+ ('E' ('-' | '+')? digit+)?;
		{normal} string			= ''' [all - [ 9 + [13 + '''] ]]* ''';
		
		// Comentários		
		{normal} comment_line			   = '//'[all-10]*10;
		{normal->comment, comment} comment = '/*';
		{comment} comment_end 			   = '*/'; 
		{comment} comment_body 			   = [all - ['*' + '/']]*; 
		{comment} star 					   = '*'; 
		{comment} slash 				   = '/';
		
		{normal} blank 			= (' '| 9 | 10 | 13)+;

Ignored Tokens

		blank, comment, comment_line;
		
Productions

		start = program;
		
		program = programa id inicio decl* command* fim;
		
		decl = 
			{variable} tipo dois_pontos varlist* var semicolon | 
			{constant} const id valor semicolon;
				
		var = 
			{id} id | 
			{id_array} id_array;
		
		varlist = var virgula;
		
		valor = 
			{string} string | 
			{integer} n_int | 
			{real} n_real;
		
		command = 
			{attribution} 	var atribuicao expression semicolon |
			
			{read} 			leia par_e varlist* var par_d semicolon | 
			
			{write}			escreva par_e explist* expression par_d semicolon |
			
			{if} 			se par_e exp_logic par_d entao command+ elsepart? fim_se semicolon |
			
			{switch}		avalie par_e expression par_d casepart+ elseswitch? fim_avalie semicolon |
			
			{while}			enquanto par_e exp_logic par_d faca command+ fim_enquanto semicolon |
			
			{repeat} 		repita command+ ate par_e exp_logic par_d semicolon |
			
			{for}			para var de [x1]:n_int ate [x2]:n_int faca command+ fim_para semicolon |
			
			{for_passo}		para var de [x1]:n_int passo [x2]:n_int ate [x3]:n_int faca command+ fim_para semicolon;
			
		
		elsepart = senao command+;
		
		casepart = caso valor dois_pontos command+;
		
		elseswitch = senao dois_pontos command+;

		explist = expression virgula;
		
		expression = conditional_or;
		
		exp_logic = conditional_or;
		
		conditional_or =
				{ou} conditional_or ou conditional_and | 
				{e} conditional_and;
		
		conditional_and = 
				{e} conditional_and e conditional_xor |
				{xor} conditional_xor;
				
		conditional_xor =
				{xor} conditional_xor xor exp_equality |
				{igual} exp_equality;
		
		exp_equality =
				{igual} exp_equality igual exp_relational |
				{diferente} exp_equality diferente exp_relational |
				{expressao} exp_relational;
				
		exp_relational = 
				{maior} exp_relational maior exp_additive |
				{menor} exp_relational menor exp_additive |
				{maior_igual} exp_relational maior_igual exp_additive |
				{menor_igual} exp_relational menor_igual exp_additive |
				{expressao} exp_additive ;
				
		exp_additive =
				{soma} exp_additive mais exp_multiplicative |
				{subtracao} exp_additive menos exp_multiplicative |
				{multiplicacao} exp_multiplicative ;
		
		exp_multiplicative = 
				{multiplicacao} exp_multiplicative mult exp_unary |
				{divisao} exp_multiplicative divisao exp_unary |
				{unario} exp_unary;
		
		exp_unary = 
				{negativo} menos exp_unary |
				{negacao} nao exp_unary |
				{primario} primary;
			
		primary =
				{valor} valor |
				{var} var |
				{par_exp} par_e expression par_d;
		

			


