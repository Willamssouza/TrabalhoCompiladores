/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPStart().apply(this);
        outStart(node);
    }

    public void inAStartStart(AStartStart node)
    {
        defaultIn(node);
    }

    public void outAStartStart(AStartStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStartStart(AStartStart node)
    {
        inAStartStart(node);
        if(node.getProgram() != null)
        {
            node.getProgram().apply(this);
        }
        outAStartStart(node);
    }

    public void inAProgramProgram(AProgramProgram node)
    {
        defaultIn(node);
    }

    public void outAProgramProgram(AProgramProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramProgram(AProgramProgram node)
    {
        inAProgramProgram(node);
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        {
            List<PCommand> copy = new ArrayList<PCommand>(node.getCommand());
            Collections.reverse(copy);
            for(PCommand e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDecl> copy = new ArrayList<PDecl>(node.getDecl());
            Collections.reverse(copy);
            for(PDecl e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getPrograma() != null)
        {
            node.getPrograma().apply(this);
        }
        outAProgramProgram(node);
    }

    public void inAVariableDecl(AVariableDecl node)
    {
        defaultIn(node);
    }

    public void outAVariableDecl(AVariableDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableDecl(AVariableDecl node)
    {
        inAVariableDecl(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        {
            List<PVarlist> copy = new ArrayList<PVarlist>(node.getVarlist());
            Collections.reverse(copy);
            for(PVarlist e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAVariableDecl(node);
    }

    public void inAConstantDecl(AConstantDecl node)
    {
        defaultIn(node);
    }

    public void outAConstantDecl(AConstantDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantDecl(AConstantDecl node)
    {
        inAConstantDecl(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getConst() != null)
        {
            node.getConst().apply(this);
        }
        outAConstantDecl(node);
    }

    public void inAIdVar(AIdVar node)
    {
        defaultIn(node);
    }

    public void outAIdVar(AIdVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVar(AIdVar node)
    {
        inAIdVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdVar(node);
    }

    public void inAIdArrayVar(AIdArrayVar node)
    {
        defaultIn(node);
    }

    public void outAIdArrayVar(AIdArrayVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdArrayVar(AIdArrayVar node)
    {
        inAIdArrayVar(node);
        if(node.getIdArray() != null)
        {
            node.getIdArray().apply(this);
        }
        outAIdArrayVar(node);
    }

    public void inAVarlist(AVarlist node)
    {
        defaultIn(node);
    }

    public void outAVarlist(AVarlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarlist(AVarlist node)
    {
        inAVarlist(node);
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarlist(node);
    }

    public void inAStringValor(AStringValor node)
    {
        defaultIn(node);
    }

    public void outAStringValor(AStringValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringValor(AStringValor node)
    {
        inAStringValor(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringValor(node);
    }

    public void inAIntegerValor(AIntegerValor node)
    {
        defaultIn(node);
    }

    public void outAIntegerValor(AIntegerValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerValor(AIntegerValor node)
    {
        inAIntegerValor(node);
        if(node.getNInt() != null)
        {
            node.getNInt().apply(this);
        }
        outAIntegerValor(node);
    }

    public void inARealValor(ARealValor node)
    {
        defaultIn(node);
    }

    public void outARealValor(ARealValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealValor(ARealValor node)
    {
        inARealValor(node);
        if(node.getNReal() != null)
        {
            node.getNReal().apply(this);
        }
        outARealValor(node);
    }

    public void inAAttributionCommand(AAttributionCommand node)
    {
        defaultIn(node);
    }

    public void outAAttributionCommand(AAttributionCommand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttributionCommand(AAttributionCommand node)
    {
        inAAttributionCommand(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAAttributionCommand(node);
    }

    public void inAReadCommand(AReadCommand node)
    {
        defaultIn(node);
    }

    public void outAReadCommand(AReadCommand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReadCommand(AReadCommand node)
    {
        inAReadCommand(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getParD() != null)
        {
            node.getParD().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        {
            List<PVarlist> copy = new ArrayList<PVarlist>(node.getVarlist());
            Collections.reverse(copy);
            for(PVarlist e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getParE() != null)
        {
            node.getParE().apply(this);
        }
        if(node.getLeia() != null)
        {
            node.getLeia().apply(this);
        }
        outAReadCommand(node);
    }

    public void inAWriteCommand(AWriteCommand node)
    {
        defaultIn(node);
    }

    public void outAWriteCommand(AWriteCommand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWriteCommand(AWriteCommand node)
    {
        inAWriteCommand(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getParD() != null)
        {
            node.getParD().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        {
            List<PExplist> copy = new ArrayList<PExplist>(node.getExplist());
            Collections.reverse(copy);
            for(PExplist e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getParE() != null)
        {
            node.getParE().apply(this);
        }
        if(node.getEscreva() != null)
        {
            node.getEscreva().apply(this);
        }
        outAWriteCommand(node);
    }

    public void inAIfCommand(AIfCommand node)
    {
        defaultIn(node);
    }

    public void outAIfCommand(AIfCommand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfCommand(AIfCommand node)
    {
        inAIfCommand(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getFimSe() != null)
        {
            node.getFimSe().apply(this);
        }
        if(node.getElsepart() != null)
        {
            node.getElsepart().apply(this);
        }
        {
            List<PCommand> copy = new ArrayList<PCommand>(node.getCommand());
            Collections.reverse(copy);
            for(PCommand e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getEntao() != null)
        {
            node.getEntao().apply(this);
        }
        if(node.getParD() != null)
        {
            node.getParD().apply(this);
        }
        if(node.getExplogic() != null)
        {
            node.getExplogic().apply(this);
        }
        if(node.getParE() != null)
        {
            node.getParE().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outAIfCommand(node);
    }

    public void inASwitchCommand(ASwitchCommand node)
    {
        defaultIn(node);
    }

    public void outASwitchCommand(ASwitchCommand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASwitchCommand(ASwitchCommand node)
    {
        inASwitchCommand(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getFimAvalie() != null)
        {
            node.getFimAvalie().apply(this);
        }
        if(node.getElseswitch() != null)
        {
            node.getElseswitch().apply(this);
        }
        {
            List<PCasepart> copy = new ArrayList<PCasepart>(node.getCasepart());
            Collections.reverse(copy);
            for(PCasepart e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getParD() != null)
        {
            node.getParD().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParE() != null)
        {
            node.getParE().apply(this);
        }
        if(node.getAvalie() != null)
        {
            node.getAvalie().apply(this);
        }
        outASwitchCommand(node);
    }

    public void inAWhileCommand(AWhileCommand node)
    {
        defaultIn(node);
    }

    public void outAWhileCommand(AWhileCommand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileCommand(AWhileCommand node)
    {
        inAWhileCommand(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getFimEnquanto() != null)
        {
            node.getFimEnquanto().apply(this);
        }
        {
            List<PCommand> copy = new ArrayList<PCommand>(node.getCommand());
            Collections.reverse(copy);
            for(PCommand e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getParD() != null)
        {
            node.getParD().apply(this);
        }
        if(node.getExplogic() != null)
        {
            node.getExplogic().apply(this);
        }
        if(node.getParE() != null)
        {
            node.getParE().apply(this);
        }
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        outAWhileCommand(node);
    }

    public void inARepeatCommand(ARepeatCommand node)
    {
        defaultIn(node);
    }

    public void outARepeatCommand(ARepeatCommand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepeatCommand(ARepeatCommand node)
    {
        inARepeatCommand(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getParD() != null)
        {
            node.getParD().apply(this);
        }
        if(node.getExplogic() != null)
        {
            node.getExplogic().apply(this);
        }
        if(node.getParE() != null)
        {
            node.getParE().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        {
            List<PCommand> copy = new ArrayList<PCommand>(node.getCommand());
            Collections.reverse(copy);
            for(PCommand e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRepita() != null)
        {
            node.getRepita().apply(this);
        }
        outARepeatCommand(node);
    }

    public void inAForCommand(AForCommand node)
    {
        defaultIn(node);
    }

    public void outAForCommand(AForCommand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForCommand(AForCommand node)
    {
        inAForCommand(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getFimPara() != null)
        {
            node.getFimPara().apply(this);
        }
        {
            List<PCommand> copy = new ArrayList<PCommand>(node.getCommand());
            Collections.reverse(copy);
            for(PCommand e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getX2() != null)
        {
            node.getX2().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getX1() != null)
        {
            node.getX1().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        outAForCommand(node);
    }

    public void inAForPassoCommand(AForPassoCommand node)
    {
        defaultIn(node);
    }

    public void outAForPassoCommand(AForPassoCommand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForPassoCommand(AForPassoCommand node)
    {
        inAForPassoCommand(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getFimPara() != null)
        {
            node.getFimPara().apply(this);
        }
        {
            List<PCommand> copy = new ArrayList<PCommand>(node.getCommand());
            Collections.reverse(copy);
            for(PCommand e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getX3() != null)
        {
            node.getX3().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getX2() != null)
        {
            node.getX2().apply(this);
        }
        if(node.getPasso() != null)
        {
            node.getPasso().apply(this);
        }
        if(node.getX1() != null)
        {
            node.getX1().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        outAForPassoCommand(node);
    }

    public void inAElsepart(AElsepart node)
    {
        defaultIn(node);
    }

    public void outAElsepart(AElsepart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElsepart(AElsepart node)
    {
        inAElsepart(node);
        {
            List<PCommand> copy = new ArrayList<PCommand>(node.getCommand());
            Collections.reverse(copy);
            for(PCommand e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        outAElsepart(node);
    }

    public void inACasepart(ACasepart node)
    {
        defaultIn(node);
    }

    public void outACasepart(ACasepart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACasepart(ACasepart node)
    {
        inACasepart(node);
        {
            List<PCommand> copy = new ArrayList<PCommand>(node.getCommand());
            Collections.reverse(copy);
            for(PCommand e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getCaso() != null)
        {
            node.getCaso().apply(this);
        }
        outACasepart(node);
    }

    public void inAElseswitch(AElseswitch node)
    {
        defaultIn(node);
    }

    public void outAElseswitch(AElseswitch node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseswitch(AElseswitch node)
    {
        inAElseswitch(node);
        {
            List<PCommand> copy = new ArrayList<PCommand>(node.getCommand());
            Collections.reverse(copy);
            for(PCommand e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        outAElseswitch(node);
    }

    public void inAExpSumExp(AExpSumExp node)
    {
        defaultIn(node);
    }

    public void outAExpSumExp(AExpSumExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpSumExp(AExpSumExp node)
    {
        inAExpSumExp(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getMais() != null)
        {
            node.getMais().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExpSumExp(node);
    }

    public void inAExpSubExp(AExpSubExp node)
    {
        defaultIn(node);
    }

    public void outAExpSubExp(AExpSubExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpSubExp(AExpSubExp node)
    {
        inAExpSubExp(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExpSubExp(node);
    }

    public void inAExpTermExp(AExpTermExp node)
    {
        defaultIn(node);
    }

    public void outAExpTermExp(AExpTermExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpTermExp(AExpTermExp node)
    {
        inAExpTermExp(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAExpTermExp(node);
    }

    public void inAExplist(AExplist node)
    {
        defaultIn(node);
    }

    public void outAExplist(AExplist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExplist(AExplist node)
    {
        inAExplist(node);
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExplist(node);
    }

    public void inATermMultTerm(ATermMultTerm node)
    {
        defaultIn(node);
    }

    public void outATermMultTerm(ATermMultTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermMultTerm(ATermMultTerm node)
    {
        inATermMultTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermMultTerm(node);
    }

    public void inATermDivTerm(ATermDivTerm node)
    {
        defaultIn(node);
    }

    public void outATermDivTerm(ATermDivTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermDivTerm(ATermDivTerm node)
    {
        inATermDivTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getDivisao() != null)
        {
            node.getDivisao().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermDivTerm(node);
    }

    public void inATermFactorTerm(ATermFactorTerm node)
    {
        defaultIn(node);
    }

    public void outATermFactorTerm(ATermFactorTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermFactorTerm(ATermFactorTerm node)
    {
        inATermFactorTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outATermFactorTerm(node);
    }

    public void inAValorFactor(AValorFactor node)
    {
        defaultIn(node);
    }

    public void outAValorFactor(AValorFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorFactor(AValorFactor node)
    {
        inAValorFactor(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValorFactor(node);
    }

    public void inAVarFactor(AVarFactor node)
    {
        defaultIn(node);
    }

    public void outAVarFactor(AVarFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarFactor(AVarFactor node)
    {
        inAVarFactor(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarFactor(node);
    }

    public void inAParExpFactor(AParExpFactor node)
    {
        defaultIn(node);
    }

    public void outAParExpFactor(AParExpFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParExpFactor(AParExpFactor node)
    {
        inAParExpFactor(node);
        if(node.getParD() != null)
        {
            node.getParD().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParE() != null)
        {
            node.getParE().apply(this);
        }
        outAParExpFactor(node);
    }

    public void inALogicFactor(ALogicFactor node)
    {
        defaultIn(node);
    }

    public void outALogicFactor(ALogicFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicFactor(ALogicFactor node)
    {
        inALogicFactor(node);
        if(node.getExplogic() != null)
        {
            node.getExplogic().apply(this);
        }
        outALogicFactor(node);
    }

    public void inAExplogic(AExplogic node)
    {
        defaultIn(node);
    }

    public void outAExplogic(AExplogic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExplogic(AExplogic node)
    {
        inAExplogic(node);
        outAExplogic(node);
    }
}
