/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPStart().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAStart(AStart node)
    {
        defaultIn(node);
    }

    public void outAStart(AStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStart(AStart node)
    {
        inAStart(node);
        if(node.getProgram() != null)
        {
            node.getProgram().apply(this);
        }
        outAStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            List<PDecl> copy = new ArrayList<PDecl>(node.getDecl());
            for(PDecl e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PCommand> copy = new ArrayList<PCommand>(node.getCommand());
            for(PCommand e : copy)
            {
                e.apply(this);
            }
        }
        outAProgram(node);
    }

    public void inAVariableDecl(AVariableDecl node)
    {
        defaultIn(node);
    }

    public void outAVariableDecl(AVariableDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableDecl(AVariableDecl node)
    {
        inAVariableDecl(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        {
            List<PVar> copy = new ArrayList<PVar>(node.getVar());
            for(PVar e : copy)
            {
                e.apply(this);
            }
        }
        outAVariableDecl(node);
    }

    public void inAConstantDecl(AConstantDecl node)
    {
        defaultIn(node);
    }

    public void outAConstantDecl(AConstantDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantDecl(AConstantDecl node)
    {
        inAConstantDecl(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAConstantDecl(node);
    }

    public void inAIdVar(AIdVar node)
    {
        defaultIn(node);
    }

    public void outAIdVar(AIdVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVar(AIdVar node)
    {
        inAIdVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdVar(node);
    }

    public void inAIdArrayVar(AIdArrayVar node)
    {
        defaultIn(node);
    }

    public void outAIdArrayVar(AIdArrayVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdArrayVar(AIdArrayVar node)
    {
        inAIdArrayVar(node);
        if(node.getIdArray() != null)
        {
            node.getIdArray().apply(this);
        }
        outAIdArrayVar(node);
    }

    public void inAStringValor(AStringValor node)
    {
        defaultIn(node);
    }

    public void outAStringValor(AStringValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringValor(AStringValor node)
    {
        inAStringValor(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringValor(node);
    }

    public void inAIntegerValor(AIntegerValor node)
    {
        defaultIn(node);
    }

    public void outAIntegerValor(AIntegerValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerValor(AIntegerValor node)
    {
        inAIntegerValor(node);
        if(node.getNInt() != null)
        {
            node.getNInt().apply(this);
        }
        outAIntegerValor(node);
    }

    public void inARealValor(ARealValor node)
    {
        defaultIn(node);
    }

    public void outARealValor(ARealValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealValor(ARealValor node)
    {
        inARealValor(node);
        if(node.getNReal() != null)
        {
            node.getNReal().apply(this);
        }
        outARealValor(node);
    }

    public void inAAttributionCommand(AAttributionCommand node)
    {
        defaultIn(node);
    }

    public void outAAttributionCommand(AAttributionCommand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttributionCommand(AAttributionCommand node)
    {
        inAAttributionCommand(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAAttributionCommand(node);
    }

    public void inAReadCommand(AReadCommand node)
    {
        defaultIn(node);
    }

    public void outAReadCommand(AReadCommand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReadCommand(AReadCommand node)
    {
        inAReadCommand(node);
        {
            List<PVar> copy = new ArrayList<PVar>(node.getVar());
            for(PVar e : copy)
            {
                e.apply(this);
            }
        }
        outAReadCommand(node);
    }

    public void inAWriteCommand(AWriteCommand node)
    {
        defaultIn(node);
    }

    public void outAWriteCommand(AWriteCommand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWriteCommand(AWriteCommand node)
    {
        inAWriteCommand(node);
        {
            List<PExp> copy = new ArrayList<PExp>(node.getExp());
            for(PExp e : copy)
            {
                e.apply(this);
            }
        }
        outAWriteCommand(node);
    }

    public void inAIfCommand(AIfCommand node)
    {
        defaultIn(node);
    }

    public void outAIfCommand(AIfCommand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfCommand(AIfCommand node)
    {
        inAIfCommand(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        {
            List<PCommand> copy = new ArrayList<PCommand>(node.getThen());
            for(PCommand e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PCommand> copy = new ArrayList<PCommand>(node.getElse());
            for(PCommand e : copy)
            {
                e.apply(this);
            }
        }
        outAIfCommand(node);
    }

    public void inASwitchCommand(ASwitchCommand node)
    {
        defaultIn(node);
    }

    public void outASwitchCommand(ASwitchCommand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASwitchCommand(ASwitchCommand node)
    {
        inASwitchCommand(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        {
            List<PCase> copy = new ArrayList<PCase>(node.getCase());
            for(PCase e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PCommand> copy = new ArrayList<PCommand>(node.getElseSwitch());
            for(PCommand e : copy)
            {
                e.apply(this);
            }
        }
        outASwitchCommand(node);
    }

    public void inAWhileCommand(AWhileCommand node)
    {
        defaultIn(node);
    }

    public void outAWhileCommand(AWhileCommand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileCommand(AWhileCommand node)
    {
        inAWhileCommand(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        {
            List<PCommand> copy = new ArrayList<PCommand>(node.getCommand());
            for(PCommand e : copy)
            {
                e.apply(this);
            }
        }
        outAWhileCommand(node);
    }

    public void inARepeatCommand(ARepeatCommand node)
    {
        defaultIn(node);
    }

    public void outARepeatCommand(ARepeatCommand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepeatCommand(ARepeatCommand node)
    {
        inARepeatCommand(node);
        {
            List<PCommand> copy = new ArrayList<PCommand>(node.getCommand());
            for(PCommand e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outARepeatCommand(node);
    }

    public void inAForCommand(AForCommand node)
    {
        defaultIn(node);
    }

    public void outAForCommand(AForCommand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForCommand(AForCommand node)
    {
        inAForCommand(node);
        if(node.getX1() != null)
        {
            node.getX1().apply(this);
        }
        if(node.getX2() != null)
        {
            node.getX2().apply(this);
        }
        {
            List<PCommand> copy = new ArrayList<PCommand>(node.getCommand());
            for(PCommand e : copy)
            {
                e.apply(this);
            }
        }
        outAForCommand(node);
    }

    public void inAForPassoCommand(AForPassoCommand node)
    {
        defaultIn(node);
    }

    public void outAForPassoCommand(AForPassoCommand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForPassoCommand(AForPassoCommand node)
    {
        inAForPassoCommand(node);
        if(node.getX1() != null)
        {
            node.getX1().apply(this);
        }
        if(node.getX2() != null)
        {
            node.getX2().apply(this);
        }
        if(node.getX3() != null)
        {
            node.getX3().apply(this);
        }
        {
            List<PCommand> copy = new ArrayList<PCommand>(node.getCommand());
            for(PCommand e : copy)
            {
                e.apply(this);
            }
        }
        outAForPassoCommand(node);
    }

    public void inACase(ACase node)
    {
        defaultIn(node);
    }

    public void outACase(ACase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACase(ACase node)
    {
        inACase(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        {
            List<PCommand> copy = new ArrayList<PCommand>(node.getCommand());
            for(PCommand e : copy)
            {
                e.apply(this);
            }
        }
        outACase(node);
    }

    public void inAOuExp(AOuExp node)
    {
        defaultIn(node);
    }

    public void outAOuExp(AOuExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuExp(AOuExp node)
    {
        inAOuExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAOuExp(node);
    }

    public void inAEExp(AEExp node)
    {
        defaultIn(node);
    }

    public void outAEExp(AEExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEExp(AEExp node)
    {
        inAEExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAEExp(node);
    }

    public void inAXorExp(AXorExp node)
    {
        defaultIn(node);
    }

    public void outAXorExp(AXorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorExp(AXorExp node)
    {
        inAXorExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAXorExp(node);
    }

    public void inAIgualExp(AIgualExp node)
    {
        defaultIn(node);
    }

    public void outAIgualExp(AIgualExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualExp(AIgualExp node)
    {
        inAIgualExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAIgualExp(node);
    }

    public void inADiferenteExp(ADiferenteExp node)
    {
        defaultIn(node);
    }

    public void outADiferenteExp(ADiferenteExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiferenteExp(ADiferenteExp node)
    {
        inADiferenteExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outADiferenteExp(node);
    }

    public void inAMaiorExp(AMaiorExp node)
    {
        defaultIn(node);
    }

    public void outAMaiorExp(AMaiorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorExp(AMaiorExp node)
    {
        inAMaiorExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMaiorExp(node);
    }

    public void inAMenorExp(AMenorExp node)
    {
        defaultIn(node);
    }

    public void outAMenorExp(AMenorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorExp(AMenorExp node)
    {
        inAMenorExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMenorExp(node);
    }

    public void inAMaiorIgualExp(AMaiorIgualExp node)
    {
        defaultIn(node);
    }

    public void outAMaiorIgualExp(AMaiorIgualExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorIgualExp(AMaiorIgualExp node)
    {
        inAMaiorIgualExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMaiorIgualExp(node);
    }

    public void inAMenorIgualExp(AMenorIgualExp node)
    {
        defaultIn(node);
    }

    public void outAMenorIgualExp(AMenorIgualExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorIgualExp(AMenorIgualExp node)
    {
        inAMenorIgualExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMenorIgualExp(node);
    }

    public void inASomaExp(ASomaExp node)
    {
        defaultIn(node);
    }

    public void outASomaExp(ASomaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaExp(ASomaExp node)
    {
        inASomaExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outASomaExp(node);
    }

    public void inASubtracaoExp(ASubtracaoExp node)
    {
        defaultIn(node);
    }

    public void outASubtracaoExp(ASubtracaoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubtracaoExp(ASubtracaoExp node)
    {
        inASubtracaoExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outASubtracaoExp(node);
    }

    public void inAMultiplicacaoExp(AMultiplicacaoExp node)
    {
        defaultIn(node);
    }

    public void outAMultiplicacaoExp(AMultiplicacaoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplicacaoExp(AMultiplicacaoExp node)
    {
        inAMultiplicacaoExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMultiplicacaoExp(node);
    }

    public void inADivisaoExp(ADivisaoExp node)
    {
        defaultIn(node);
    }

    public void outADivisaoExp(ADivisaoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivisaoExp(ADivisaoExp node)
    {
        inADivisaoExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outADivisaoExp(node);
    }

    public void inAValorExp(AValorExp node)
    {
        defaultIn(node);
    }

    public void outAValorExp(AValorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorExp(AValorExp node)
    {
        inAValorExp(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValorExp(node);
    }

    public void inAVarExp(AVarExp node)
    {
        defaultIn(node);
    }

    public void outAVarExp(AVarExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarExp(AVarExp node)
    {
        inAVarExp(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarExp(node);
    }
}
