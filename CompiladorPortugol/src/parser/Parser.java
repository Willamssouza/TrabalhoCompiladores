/* This file was generated by SableCC (http://www.sablecc.org/). */

package parser;

import lexer.*;
import node.*;
import analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PStart node1 = (PStart) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AStart */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAprogram1Program */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AAprogram2Program */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AAprogram3Program */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce AAprogram4Program */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list, false);
            }
            break;
            case 5: /* reduce AAvariabledecl1Decl */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce AAvariabledecl2Decl */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list, false);
            }
            break;
            case 7: /* reduce AConstantDecl */
            {
                ArrayList<Object> list = new7();
                push(goTo(2), list, false);
            }
            break;
            case 8: /* reduce AIdVar */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list, false);
            }
            break;
            case 9: /* reduce AIdArrayVar */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list, false);
            }
            break;
            case 10: /* reduce AVarlist */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list, false);
            }
            break;
            case 11: /* reduce AStringValor */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list, false);
            }
            break;
            case 12: /* reduce AIntegerValor */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list, false);
            }
            break;
            case 13: /* reduce ARealValor */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list, false);
            }
            break;
            case 14: /* reduce AAttributionCommand */
            {
                ArrayList<Object> list = new14();
                push(goTo(6), list, false);
            }
            break;
            case 15: /* reduce AAreadcommand1Command */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list, false);
            }
            break;
            case 16: /* reduce AAreadcommand2Command */
            {
                ArrayList<Object> list = new16();
                push(goTo(6), list, false);
            }
            break;
            case 17: /* reduce AAwritecommand1Command */
            {
                ArrayList<Object> list = new17();
                push(goTo(6), list, false);
            }
            break;
            case 18: /* reduce AAwritecommand2Command */
            {
                ArrayList<Object> list = new18();
                push(goTo(6), list, false);
            }
            break;
            case 19: /* reduce AAifcommand1Command */
            {
                ArrayList<Object> list = new19();
                push(goTo(6), list, false);
            }
            break;
            case 20: /* reduce AAifcommand2Command */
            {
                ArrayList<Object> list = new20();
                push(goTo(6), list, false);
            }
            break;
            case 21: /* reduce AAswitchcommand1Command */
            {
                ArrayList<Object> list = new21();
                push(goTo(6), list, false);
            }
            break;
            case 22: /* reduce AAswitchcommand2Command */
            {
                ArrayList<Object> list = new22();
                push(goTo(6), list, false);
            }
            break;
            case 23: /* reduce AWhileCommand */
            {
                ArrayList<Object> list = new23();
                push(goTo(6), list, false);
            }
            break;
            case 24: /* reduce ARepeatCommand */
            {
                ArrayList<Object> list = new24();
                push(goTo(6), list, false);
            }
            break;
            case 25: /* reduce AForCommand */
            {
                ArrayList<Object> list = new25();
                push(goTo(6), list, false);
            }
            break;
            case 26: /* reduce AForPassoCommand */
            {
                ArrayList<Object> list = new26();
                push(goTo(6), list, false);
            }
            break;
            case 27: /* reduce AElsepart */
            {
                ArrayList<Object> list = new27();
                push(goTo(7), list, false);
            }
            break;
            case 28: /* reduce ACasepart */
            {
                ArrayList<Object> list = new28();
                push(goTo(8), list, false);
            }
            break;
            case 29: /* reduce AElseswitch */
            {
                ArrayList<Object> list = new29();
                push(goTo(9), list, false);
            }
            break;
            case 30: /* reduce AExplist */
            {
                ArrayList<Object> list = new30();
                push(goTo(10), list, false);
            }
            break;
            case 31: /* reduce AExpression */
            {
                ArrayList<Object> list = new31();
                push(goTo(11), list, false);
            }
            break;
            case 32: /* reduce AExpLogic */
            {
                ArrayList<Object> list = new32();
                push(goTo(12), list, false);
            }
            break;
            case 33: /* reduce AOuConditionalOr */
            {
                ArrayList<Object> list = new33();
                push(goTo(13), list, false);
            }
            break;
            case 34: /* reduce AEConditionalOr */
            {
                ArrayList<Object> list = new34();
                push(goTo(13), list, false);
            }
            break;
            case 35: /* reduce AEConditionalAnd */
            {
                ArrayList<Object> list = new35();
                push(goTo(14), list, false);
            }
            break;
            case 36: /* reduce AXorConditionalAnd */
            {
                ArrayList<Object> list = new36();
                push(goTo(14), list, false);
            }
            break;
            case 37: /* reduce AXorConditionalXor */
            {
                ArrayList<Object> list = new37();
                push(goTo(15), list, false);
            }
            break;
            case 38: /* reduce AIgualConditionalXor */
            {
                ArrayList<Object> list = new38();
                push(goTo(15), list, false);
            }
            break;
            case 39: /* reduce AIgualExpEquality */
            {
                ArrayList<Object> list = new39();
                push(goTo(16), list, false);
            }
            break;
            case 40: /* reduce ADiferenteExpEquality */
            {
                ArrayList<Object> list = new40();
                push(goTo(16), list, false);
            }
            break;
            case 41: /* reduce AExpressaoExpEquality */
            {
                ArrayList<Object> list = new41();
                push(goTo(16), list, false);
            }
            break;
            case 42: /* reduce AMaiorExpRelational */
            {
                ArrayList<Object> list = new42();
                push(goTo(17), list, false);
            }
            break;
            case 43: /* reduce AMenorExpRelational */
            {
                ArrayList<Object> list = new43();
                push(goTo(17), list, false);
            }
            break;
            case 44: /* reduce AMaiorIgualExpRelational */
            {
                ArrayList<Object> list = new44();
                push(goTo(17), list, false);
            }
            break;
            case 45: /* reduce AMenorIgualExpRelational */
            {
                ArrayList<Object> list = new45();
                push(goTo(17), list, false);
            }
            break;
            case 46: /* reduce AExpressaoExpRelational */
            {
                ArrayList<Object> list = new46();
                push(goTo(17), list, false);
            }
            break;
            case 47: /* reduce ASomaExpAdditive */
            {
                ArrayList<Object> list = new47();
                push(goTo(18), list, false);
            }
            break;
            case 48: /* reduce ASubtracaoExpAdditive */
            {
                ArrayList<Object> list = new48();
                push(goTo(18), list, false);
            }
            break;
            case 49: /* reduce AMultiplicacaoExpAdditive */
            {
                ArrayList<Object> list = new49();
                push(goTo(18), list, false);
            }
            break;
            case 50: /* reduce AMultiplicacaoExpMultiplicative */
            {
                ArrayList<Object> list = new50();
                push(goTo(19), list, false);
            }
            break;
            case 51: /* reduce ADivisaoExpMultiplicative */
            {
                ArrayList<Object> list = new51();
                push(goTo(19), list, false);
            }
            break;
            case 52: /* reduce AUnarioExpMultiplicative */
            {
                ArrayList<Object> list = new52();
                push(goTo(19), list, false);
            }
            break;
            case 53: /* reduce ANegativoExpUnary */
            {
                ArrayList<Object> list = new53();
                push(goTo(20), list, false);
            }
            break;
            case 54: /* reduce ANegacaoExpUnary */
            {
                ArrayList<Object> list = new54();
                push(goTo(20), list, false);
            }
            break;
            case 55: /* reduce APrimarioExpUnary */
            {
                ArrayList<Object> list = new55();
                push(goTo(20), list, false);
            }
            break;
            case 56: /* reduce AValorPrimary */
            {
                ArrayList<Object> list = new56();
                push(goTo(21), list, false);
            }
            break;
            case 57: /* reduce AVarPrimary */
            {
                ArrayList<Object> list = new57();
                push(goTo(21), list, false);
            }
            break;
            case 58: /* reduce AParExpPrimary */
            {
                ArrayList<Object> list = new58();
                push(goTo(21), list, false);
            }
            break;
            case 59: /* reduce ATerminal$Decl */
            {
                ArrayList<Object> list = new59();
                push(goTo(22), list, true);
            }
            break;
            case 60: /* reduce ANonTerminal$Decl */
            {
                ArrayList<Object> list = new60();
                push(goTo(22), list, true);
            }
            break;
            case 61: /* reduce ATerminal$Command */
            {
                ArrayList<Object> list = new61();
                push(goTo(23), list, true);
            }
            break;
            case 62: /* reduce ANonTerminal$Command */
            {
                ArrayList<Object> list = new62();
                push(goTo(23), list, true);
            }
            break;
            case 63: /* reduce ATerminal$Varlist */
            {
                ArrayList<Object> list = new63();
                push(goTo(24), list, true);
            }
            break;
            case 64: /* reduce ANonTerminal$Varlist */
            {
                ArrayList<Object> list = new64();
                push(goTo(24), list, true);
            }
            break;
            case 65: /* reduce ATerminal$Explist */
            {
                ArrayList<Object> list = new65();
                push(goTo(25), list, true);
            }
            break;
            case 66: /* reduce ANonTerminal$Explist */
            {
                ArrayList<Object> list = new66();
                push(goTo(25), list, true);
            }
            break;
            case 67: /* reduce ATerminal$Casepart */
            {
                ArrayList<Object> list = new67();
                push(goTo(26), list, true);
            }
            break;
            case 68: /* reduce ANonTerminal$Casepart */
            {
                ArrayList<Object> list = new68();
                push(goTo(26), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AStart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        PProgram pprogramNode2;
        pprogramNode2 = (PProgram)nodeArrayList1.get(0);

        pstartNode1 = new AStart(pprogramNode2);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprogram1Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        TPrograma tprogramaNode2;
        TId tidNode3;
        TInicio tinicioNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TFim tfimNode7;
        tprogramaNode2 = (TPrograma)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tinicioNode4 = (TInicio)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        }
        tfimNode7 = (TFim)nodeArrayList4.get(0);

        pprogramNode1 = new AProgram(tprogramaNode2, tidNode3, tinicioNode4, listNode5, listNode6, tfimNode7);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAprogram2Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        TPrograma tprogramaNode2;
        TId tidNode3;
        TInicio tinicioNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TFim tfimNode8;
        tprogramaNode2 = (TPrograma)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tinicioNode4 = (TInicio)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        }
        tfimNode8 = (TFim)nodeArrayList5.get(0);

        pprogramNode1 = new AProgram(tprogramaNode2, tidNode3, tinicioNode4, listNode6, listNode7, tfimNode8);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAprogram3Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        TPrograma tprogramaNode2;
        TId tidNode3;
        TInicio tinicioNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TFim tfimNode8;
        tprogramaNode2 = (TPrograma)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tinicioNode4 = (TInicio)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tfimNode8 = (TFim)nodeArrayList5.get(0);

        pprogramNode1 = new AProgram(tprogramaNode2, tidNode3, tinicioNode4, listNode5, listNode7, tfimNode8);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAprogram4Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        TPrograma tprogramaNode2;
        TId tidNode3;
        TInicio tinicioNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TFim tfimNode9;
        tprogramaNode2 = (TPrograma)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tinicioNode4 = (TInicio)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList5.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tfimNode9 = (TFim)nodeArrayList6.get(0);

        pprogramNode1 = new AProgram(tprogramaNode2, tidNode3, tinicioNode4, listNode6, listNode8, tfimNode9);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAvariabledecl1Decl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecl pdeclNode1;
        {
            // Block
        TTipo ttipoNode2;
        TDoisPontos tdoispontosNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PVar pvarNode5;
        TSemicolon tsemicolonNode6;
        ttipoNode2 = (TTipo)nodeArrayList1.get(0);
        tdoispontosNode3 = (TDoisPontos)nodeArrayList2.get(0);
        {
            // Block
        }
        pvarNode5 = (PVar)nodeArrayList3.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList4.get(0);

        pdeclNode1 = new AVariableDecl(ttipoNode2, tdoispontosNode3, listNode4, pvarNode5, tsemicolonNode6);
        }
	nodeList.add(pdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAvariabledecl2Decl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecl pdeclNode1;
        {
            // Block
        TTipo ttipoNode2;
        TDoisPontos tdoispontosNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PVar pvarNode6;
        TSemicolon tsemicolonNode7;
        ttipoNode2 = (TTipo)nodeArrayList1.get(0);
        tdoispontosNode3 = (TDoisPontos)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pvarNode6 = (PVar)nodeArrayList4.get(0);
        tsemicolonNode7 = (TSemicolon)nodeArrayList5.get(0);

        pdeclNode1 = new AVariableDecl(ttipoNode2, tdoispontosNode3, listNode5, pvarNode6, tsemicolonNode7);
        }
	nodeList.add(pdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AConstantDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecl pdeclNode1;
        {
            // Block
        TConst tconstNode2;
        TId tidNode3;
        PValor pvalorNode4;
        TSemicolon tsemicolonNode5;
        tconstNode2 = (TConst)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        pvalorNode4 = (PValor)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        pdeclNode1 = new AConstantDecl(tconstNode2, tidNode3, pvalorNode4, tsemicolonNode5);
        }
	nodeList.add(pdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AIdVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvarNode1 = new AIdVar(tidNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AIdArrayVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TIdArray tidarrayNode2;
        tidarrayNode2 = (TIdArray)nodeArrayList1.get(0);

        pvarNode1 = new AIdArrayVar(tidarrayNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AVarlist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarlist pvarlistNode1;
        {
            // Block
        PVar pvarNode2;
        TVirgula tvirgulaNode3;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tvirgulaNode3 = (TVirgula)nodeArrayList2.get(0);

        pvarlistNode1 = new AVarlist(pvarNode2, tvirgulaNode3);
        }
	nodeList.add(pvarlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AStringValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pvalorNode1 = new AStringValor(tstringNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AIntegerValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TNInt tnintNode2;
        tnintNode2 = (TNInt)nodeArrayList1.get(0);

        pvalorNode1 = new AIntegerValor(tnintNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ARealValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TNReal tnrealNode2;
        tnrealNode2 = (TNReal)nodeArrayList1.get(0);

        pvalorNode1 = new ARealValor(tnrealNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAttributionCommand */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        PVar pvarNode2;
        TAtribuicao tatribuicaoNode3;
        PExpression pexpressionNode4;
        TSemicolon tsemicolonNode5;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tatribuicaoNode3 = (TAtribuicao)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        pcommandNode1 = new AAttributionCommand(pvarNode2, tatribuicaoNode3, pexpressionNode4, tsemicolonNode5);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAreadcommand1Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TLeia tleiaNode2;
        TParE tpareNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PVar pvarNode5;
        TParD tpardNode6;
        TSemicolon tsemicolonNode7;
        tleiaNode2 = (TLeia)nodeArrayList1.get(0);
        tpareNode3 = (TParE)nodeArrayList2.get(0);
        {
            // Block
        }
        pvarNode5 = (PVar)nodeArrayList3.get(0);
        tpardNode6 = (TParD)nodeArrayList4.get(0);
        tsemicolonNode7 = (TSemicolon)nodeArrayList5.get(0);

        pcommandNode1 = new AReadCommand(tleiaNode2, tpareNode3, listNode4, pvarNode5, tpardNode6, tsemicolonNode7);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAreadcommand2Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TLeia tleiaNode2;
        TParE tpareNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PVar pvarNode6;
        TParD tpardNode7;
        TSemicolon tsemicolonNode8;
        tleiaNode2 = (TLeia)nodeArrayList1.get(0);
        tpareNode3 = (TParE)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pvarNode6 = (PVar)nodeArrayList4.get(0);
        tpardNode7 = (TParD)nodeArrayList5.get(0);
        tsemicolonNode8 = (TSemicolon)nodeArrayList6.get(0);

        pcommandNode1 = new AReadCommand(tleiaNode2, tpareNode3, listNode5, pvarNode6, tpardNode7, tsemicolonNode8);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAwritecommand1Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TEscreva tescrevaNode2;
        TParE tpareNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PExpression pexpressionNode5;
        TParD tpardNode6;
        TSemicolon tsemicolonNode7;
        tescrevaNode2 = (TEscreva)nodeArrayList1.get(0);
        tpareNode3 = (TParE)nodeArrayList2.get(0);
        {
            // Block
        }
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);
        tpardNode6 = (TParD)nodeArrayList4.get(0);
        tsemicolonNode7 = (TSemicolon)nodeArrayList5.get(0);

        pcommandNode1 = new AWriteCommand(tescrevaNode2, tpareNode3, listNode4, pexpressionNode5, tpardNode6, tsemicolonNode7);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAwritecommand2Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TEscreva tescrevaNode2;
        TParE tpareNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PExpression pexpressionNode6;
        TParD tpardNode7;
        TSemicolon tsemicolonNode8;
        tescrevaNode2 = (TEscreva)nodeArrayList1.get(0);
        tpareNode3 = (TParE)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pexpressionNode6 = (PExpression)nodeArrayList4.get(0);
        tpardNode7 = (TParD)nodeArrayList5.get(0);
        tsemicolonNode8 = (TSemicolon)nodeArrayList6.get(0);

        pcommandNode1 = new AWriteCommand(tescrevaNode2, tpareNode3, listNode5, pexpressionNode6, tpardNode7, tsemicolonNode8);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAifcommand1Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TSe tseNode2;
        TParE tpareNode3;
        PExpLogic pexplogicNode4;
        TParD tpardNode5;
        TEntao tentaoNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode9 = null;
        TFimSe tfimseNode10;
        TSemicolon tsemicolonNode11;
        tseNode2 = (TSe)nodeArrayList1.get(0);
        tpareNode3 = (TParE)nodeArrayList2.get(0);
        pexplogicNode4 = (PExpLogic)nodeArrayList3.get(0);
        tpardNode5 = (TParD)nodeArrayList4.get(0);
        tentaoNode6 = (TEntao)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tfimseNode10 = (TFimSe)nodeArrayList7.get(0);
        tsemicolonNode11 = (TSemicolon)nodeArrayList8.get(0);

        pcommandNode1 = new AIfCommand(tseNode2, tpareNode3, pexplogicNode4, tpardNode5, tentaoNode6, listNode8, null, tfimseNode10, tsemicolonNode11);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAifcommand2Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TSe tseNode2;
        TParE tpareNode3;
        PExpLogic pexplogicNode4;
        TParD tpardNode5;
        TEntao tentaoNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        PElsepart pelsepartNode9;
        TFimSe tfimseNode10;
        TSemicolon tsemicolonNode11;
        tseNode2 = (TSe)nodeArrayList1.get(0);
        tpareNode3 = (TParE)nodeArrayList2.get(0);
        pexplogicNode4 = (PExpLogic)nodeArrayList3.get(0);
        tpardNode5 = (TParD)nodeArrayList4.get(0);
        tentaoNode6 = (TEntao)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        pelsepartNode9 = (PElsepart)nodeArrayList7.get(0);
        tfimseNode10 = (TFimSe)nodeArrayList8.get(0);
        tsemicolonNode11 = (TSemicolon)nodeArrayList9.get(0);

        pcommandNode1 = new AIfCommand(tseNode2, tpareNode3, pexplogicNode4, tpardNode5, tentaoNode6, listNode8, pelsepartNode9, tfimseNode10, tsemicolonNode11);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAswitchcommand1Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TAvalie tavalieNode2;
        TParE tpareNode3;
        PExpression pexpressionNode4;
        TParD tpardNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode8 = null;
        TFimAvalie tfimavalieNode9;
        TSemicolon tsemicolonNode10;
        tavalieNode2 = (TAvalie)nodeArrayList1.get(0);
        tpareNode3 = (TParE)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tpardNode5 = (TParD)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tfimavalieNode9 = (TFimAvalie)nodeArrayList6.get(0);
        tsemicolonNode10 = (TSemicolon)nodeArrayList7.get(0);

        pcommandNode1 = new ASwitchCommand(tavalieNode2, tpareNode3, pexpressionNode4, tpardNode5, listNode7, null, tfimavalieNode9, tsemicolonNode10);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAswitchcommand2Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TAvalie tavalieNode2;
        TParE tpareNode3;
        PExpression pexpressionNode4;
        TParD tpardNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        PElseswitch pelseswitchNode8;
        TFimAvalie tfimavalieNode9;
        TSemicolon tsemicolonNode10;
        tavalieNode2 = (TAvalie)nodeArrayList1.get(0);
        tpareNode3 = (TParE)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tpardNode5 = (TParD)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        pelseswitchNode8 = (PElseswitch)nodeArrayList6.get(0);
        tfimavalieNode9 = (TFimAvalie)nodeArrayList7.get(0);
        tsemicolonNode10 = (TSemicolon)nodeArrayList8.get(0);

        pcommandNode1 = new ASwitchCommand(tavalieNode2, tpareNode3, pexpressionNode4, tpardNode5, listNode7, pelseswitchNode8, tfimavalieNode9, tsemicolonNode10);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AWhileCommand */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TEnquanto tenquantoNode2;
        TParE tpareNode3;
        PExpLogic pexplogicNode4;
        TParD tpardNode5;
        TFaca tfacaNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TFimEnquanto tfimenquantoNode9;
        TSemicolon tsemicolonNode10;
        tenquantoNode2 = (TEnquanto)nodeArrayList1.get(0);
        tpareNode3 = (TParE)nodeArrayList2.get(0);
        pexplogicNode4 = (PExpLogic)nodeArrayList3.get(0);
        tpardNode5 = (TParD)nodeArrayList4.get(0);
        tfacaNode6 = (TFaca)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tfimenquantoNode9 = (TFimEnquanto)nodeArrayList7.get(0);
        tsemicolonNode10 = (TSemicolon)nodeArrayList8.get(0);

        pcommandNode1 = new AWhileCommand(tenquantoNode2, tpareNode3, pexplogicNode4, tpardNode5, tfacaNode6, listNode8, tfimenquantoNode9, tsemicolonNode10);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ARepeatCommand */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TRepita trepitaNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TAte tateNode5;
        TParE tpareNode6;
        PExpLogic pexplogicNode7;
        TParD tpardNode8;
        TSemicolon tsemicolonNode9;
        trepitaNode2 = (TRepita)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tateNode5 = (TAte)nodeArrayList3.get(0);
        tpareNode6 = (TParE)nodeArrayList4.get(0);
        pexplogicNode7 = (PExpLogic)nodeArrayList5.get(0);
        tpardNode8 = (TParD)nodeArrayList6.get(0);
        tsemicolonNode9 = (TSemicolon)nodeArrayList7.get(0);

        pcommandNode1 = new ARepeatCommand(trepitaNode2, listNode4, tateNode5, tpareNode6, pexplogicNode7, tpardNode8, tsemicolonNode9);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AForCommand */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TPara tparaNode2;
        PVar pvarNode3;
        TDe tdeNode4;
        TNInt tnintNode5;
        TAte tateNode6;
        TNInt tnintNode7;
        TFaca tfacaNode8;
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TFimPara tfimparaNode11;
        TSemicolon tsemicolonNode12;
        tparaNode2 = (TPara)nodeArrayList1.get(0);
        pvarNode3 = (PVar)nodeArrayList2.get(0);
        tdeNode4 = (TDe)nodeArrayList3.get(0);
        tnintNode5 = (TNInt)nodeArrayList4.get(0);
        tateNode6 = (TAte)nodeArrayList5.get(0);
        tnintNode7 = (TNInt)nodeArrayList6.get(0);
        tfacaNode8 = (TFaca)nodeArrayList7.get(0);
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList8.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        tfimparaNode11 = (TFimPara)nodeArrayList9.get(0);
        tsemicolonNode12 = (TSemicolon)nodeArrayList10.get(0);

        pcommandNode1 = new AForCommand(tparaNode2, pvarNode3, tdeNode4, tnintNode5, tateNode6, tnintNode7, tfacaNode8, listNode10, tfimparaNode11, tsemicolonNode12);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AForPassoCommand */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TPara tparaNode2;
        PVar pvarNode3;
        TDe tdeNode4;
        TNInt tnintNode5;
        TPasso tpassoNode6;
        TNInt tnintNode7;
        TAte tateNode8;
        TNInt tnintNode9;
        TFaca tfacaNode10;
        LinkedList<Object> listNode12 = new LinkedList<Object>();
        TFimPara tfimparaNode13;
        TSemicolon tsemicolonNode14;
        tparaNode2 = (TPara)nodeArrayList1.get(0);
        pvarNode3 = (PVar)nodeArrayList2.get(0);
        tdeNode4 = (TDe)nodeArrayList3.get(0);
        tnintNode5 = (TNInt)nodeArrayList4.get(0);
        tpassoNode6 = (TPasso)nodeArrayList5.get(0);
        tnintNode7 = (TNInt)nodeArrayList6.get(0);
        tateNode8 = (TAte)nodeArrayList7.get(0);
        tnintNode9 = (TNInt)nodeArrayList8.get(0);
        tfacaNode10 = (TFaca)nodeArrayList9.get(0);
        {
            // Block
        LinkedList<Object> listNode11 = new LinkedList<Object>();
        listNode11 = (LinkedList)nodeArrayList10.get(0);
	if(listNode11 != null)
	{
	  listNode12.addAll(listNode11);
	}
        }
        tfimparaNode13 = (TFimPara)nodeArrayList11.get(0);
        tsemicolonNode14 = (TSemicolon)nodeArrayList12.get(0);

        pcommandNode1 = new AForPassoCommand(tparaNode2, pvarNode3, tdeNode4, tnintNode5, tpassoNode6, tnintNode7, tateNode8, tnintNode9, tfacaNode10, listNode12, tfimparaNode13, tsemicolonNode14);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AElsepart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElsepart pelsepartNode1;
        {
            // Block
        TSenao tsenaoNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tsenaoNode2 = (TSenao)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pelsepartNode1 = new AElsepart(tsenaoNode2, listNode4);
        }
	nodeList.add(pelsepartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ACasepart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCasepart pcasepartNode1;
        {
            // Block
        TCaso tcasoNode2;
        PValor pvalorNode3;
        TDoisPontos tdoispontosNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tcasoNode2 = (TCaso)nodeArrayList1.get(0);
        pvalorNode3 = (PValor)nodeArrayList2.get(0);
        tdoispontosNode4 = (TDoisPontos)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pcasepartNode1 = new ACasepart(tcasoNode2, pvalorNode3, tdoispontosNode4, listNode6);
        }
	nodeList.add(pcasepartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AElseswitch */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseswitch pelseswitchNode1;
        {
            // Block
        TSenao tsenaoNode2;
        TDoisPontos tdoispontosNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tsenaoNode2 = (TSenao)nodeArrayList1.get(0);
        tdoispontosNode3 = (TDoisPontos)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pelseswitchNode1 = new AElseswitch(tsenaoNode2, tdoispontosNode3, listNode5);
        }
	nodeList.add(pelseswitchNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AExplist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExplist pexplistNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TVirgula tvirgulaNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tvirgulaNode3 = (TVirgula)nodeArrayList2.get(0);

        pexplistNode1 = new AExplist(pexpressionNode2, tvirgulaNode3);
        }
	nodeList.add(pexplistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PConditionalOr pconditionalorNode2;
        pconditionalorNode2 = (PConditionalOr)nodeArrayList1.get(0);

        pexpressionNode1 = new AExpression(pconditionalorNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AExpLogic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogic pexplogicNode1;
        {
            // Block
        PConditionalOr pconditionalorNode2;
        pconditionalorNode2 = (PConditionalOr)nodeArrayList1.get(0);

        pexplogicNode1 = new AExpLogic(pconditionalorNode2);
        }
	nodeList.add(pexplogicNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AOuConditionalOr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditionalOr pconditionalorNode1;
        {
            // Block
        PConditionalOr pconditionalorNode2;
        TOu touNode3;
        PConditionalAnd pconditionalandNode4;
        pconditionalorNode2 = (PConditionalOr)nodeArrayList1.get(0);
        touNode3 = (TOu)nodeArrayList2.get(0);
        pconditionalandNode4 = (PConditionalAnd)nodeArrayList3.get(0);

        pconditionalorNode1 = new AOuConditionalOr(pconditionalorNode2, touNode3, pconditionalandNode4);
        }
	nodeList.add(pconditionalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AEConditionalOr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditionalOr pconditionalorNode1;
        {
            // Block
        PConditionalAnd pconditionalandNode2;
        pconditionalandNode2 = (PConditionalAnd)nodeArrayList1.get(0);

        pconditionalorNode1 = new AEConditionalOr(pconditionalandNode2);
        }
	nodeList.add(pconditionalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AEConditionalAnd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditionalAnd pconditionalandNode1;
        {
            // Block
        PConditionalAnd pconditionalandNode2;
        TE teNode3;
        PConditionalXor pconditionalxorNode4;
        pconditionalandNode2 = (PConditionalAnd)nodeArrayList1.get(0);
        teNode3 = (TE)nodeArrayList2.get(0);
        pconditionalxorNode4 = (PConditionalXor)nodeArrayList3.get(0);

        pconditionalandNode1 = new AEConditionalAnd(pconditionalandNode2, teNode3, pconditionalxorNode4);
        }
	nodeList.add(pconditionalandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AXorConditionalAnd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditionalAnd pconditionalandNode1;
        {
            // Block
        PConditionalXor pconditionalxorNode2;
        pconditionalxorNode2 = (PConditionalXor)nodeArrayList1.get(0);

        pconditionalandNode1 = new AXorConditionalAnd(pconditionalxorNode2);
        }
	nodeList.add(pconditionalandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AXorConditionalXor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditionalXor pconditionalxorNode1;
        {
            // Block
        PConditionalXor pconditionalxorNode2;
        TXor txorNode3;
        PExpEquality pexpequalityNode4;
        pconditionalxorNode2 = (PConditionalXor)nodeArrayList1.get(0);
        txorNode3 = (TXor)nodeArrayList2.get(0);
        pexpequalityNode4 = (PExpEquality)nodeArrayList3.get(0);

        pconditionalxorNode1 = new AXorConditionalXor(pconditionalxorNode2, txorNode3, pexpequalityNode4);
        }
	nodeList.add(pconditionalxorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AIgualConditionalXor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditionalXor pconditionalxorNode1;
        {
            // Block
        PExpEquality pexpequalityNode2;
        pexpequalityNode2 = (PExpEquality)nodeArrayList1.get(0);

        pconditionalxorNode1 = new AIgualConditionalXor(pexpequalityNode2);
        }
	nodeList.add(pconditionalxorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AIgualExpEquality */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpEquality pexpequalityNode1;
        {
            // Block
        PExpEquality pexpequalityNode2;
        TIgual tigualNode3;
        PExpRelational pexprelationalNode4;
        pexpequalityNode2 = (PExpEquality)nodeArrayList1.get(0);
        tigualNode3 = (TIgual)nodeArrayList2.get(0);
        pexprelationalNode4 = (PExpRelational)nodeArrayList3.get(0);

        pexpequalityNode1 = new AIgualExpEquality(pexpequalityNode2, tigualNode3, pexprelationalNode4);
        }
	nodeList.add(pexpequalityNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ADiferenteExpEquality */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpEquality pexpequalityNode1;
        {
            // Block
        PExpEquality pexpequalityNode2;
        TDiferente tdiferenteNode3;
        PExpRelational pexprelationalNode4;
        pexpequalityNode2 = (PExpEquality)nodeArrayList1.get(0);
        tdiferenteNode3 = (TDiferente)nodeArrayList2.get(0);
        pexprelationalNode4 = (PExpRelational)nodeArrayList3.get(0);

        pexpequalityNode1 = new ADiferenteExpEquality(pexpequalityNode2, tdiferenteNode3, pexprelationalNode4);
        }
	nodeList.add(pexpequalityNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AExpressaoExpEquality */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpEquality pexpequalityNode1;
        {
            // Block
        PExpRelational pexprelationalNode2;
        pexprelationalNode2 = (PExpRelational)nodeArrayList1.get(0);

        pexpequalityNode1 = new AExpressaoExpEquality(pexprelationalNode2);
        }
	nodeList.add(pexpequalityNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AMaiorExpRelational */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpRelational pexprelationalNode1;
        {
            // Block
        PExpRelational pexprelationalNode2;
        TMaior tmaiorNode3;
        PExpAdditive pexpadditiveNode4;
        pexprelationalNode2 = (PExpRelational)nodeArrayList1.get(0);
        tmaiorNode3 = (TMaior)nodeArrayList2.get(0);
        pexpadditiveNode4 = (PExpAdditive)nodeArrayList3.get(0);

        pexprelationalNode1 = new AMaiorExpRelational(pexprelationalNode2, tmaiorNode3, pexpadditiveNode4);
        }
	nodeList.add(pexprelationalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AMenorExpRelational */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpRelational pexprelationalNode1;
        {
            // Block
        PExpRelational pexprelationalNode2;
        TMenor tmenorNode3;
        PExpAdditive pexpadditiveNode4;
        pexprelationalNode2 = (PExpRelational)nodeArrayList1.get(0);
        tmenorNode3 = (TMenor)nodeArrayList2.get(0);
        pexpadditiveNode4 = (PExpAdditive)nodeArrayList3.get(0);

        pexprelationalNode1 = new AMenorExpRelational(pexprelationalNode2, tmenorNode3, pexpadditiveNode4);
        }
	nodeList.add(pexprelationalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AMaiorIgualExpRelational */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpRelational pexprelationalNode1;
        {
            // Block
        PExpRelational pexprelationalNode2;
        TMaiorIgual tmaiorigualNode3;
        PExpAdditive pexpadditiveNode4;
        pexprelationalNode2 = (PExpRelational)nodeArrayList1.get(0);
        tmaiorigualNode3 = (TMaiorIgual)nodeArrayList2.get(0);
        pexpadditiveNode4 = (PExpAdditive)nodeArrayList3.get(0);

        pexprelationalNode1 = new AMaiorIgualExpRelational(pexprelationalNode2, tmaiorigualNode3, pexpadditiveNode4);
        }
	nodeList.add(pexprelationalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AMenorIgualExpRelational */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpRelational pexprelationalNode1;
        {
            // Block
        PExpRelational pexprelationalNode2;
        TMenorIgual tmenorigualNode3;
        PExpAdditive pexpadditiveNode4;
        pexprelationalNode2 = (PExpRelational)nodeArrayList1.get(0);
        tmenorigualNode3 = (TMenorIgual)nodeArrayList2.get(0);
        pexpadditiveNode4 = (PExpAdditive)nodeArrayList3.get(0);

        pexprelationalNode1 = new AMenorIgualExpRelational(pexprelationalNode2, tmenorigualNode3, pexpadditiveNode4);
        }
	nodeList.add(pexprelationalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AExpressaoExpRelational */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpRelational pexprelationalNode1;
        {
            // Block
        PExpAdditive pexpadditiveNode2;
        pexpadditiveNode2 = (PExpAdditive)nodeArrayList1.get(0);

        pexprelationalNode1 = new AExpressaoExpRelational(pexpadditiveNode2);
        }
	nodeList.add(pexprelationalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ASomaExpAdditive */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpAdditive pexpadditiveNode1;
        {
            // Block
        PExpAdditive pexpadditiveNode2;
        TMais tmaisNode3;
        PExpMultiplicative pexpmultiplicativeNode4;
        pexpadditiveNode2 = (PExpAdditive)nodeArrayList1.get(0);
        tmaisNode3 = (TMais)nodeArrayList2.get(0);
        pexpmultiplicativeNode4 = (PExpMultiplicative)nodeArrayList3.get(0);

        pexpadditiveNode1 = new ASomaExpAdditive(pexpadditiveNode2, tmaisNode3, pexpmultiplicativeNode4);
        }
	nodeList.add(pexpadditiveNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ASubtracaoExpAdditive */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpAdditive pexpadditiveNode1;
        {
            // Block
        PExpAdditive pexpadditiveNode2;
        TMenos tmenosNode3;
        PExpMultiplicative pexpmultiplicativeNode4;
        pexpadditiveNode2 = (PExpAdditive)nodeArrayList1.get(0);
        tmenosNode3 = (TMenos)nodeArrayList2.get(0);
        pexpmultiplicativeNode4 = (PExpMultiplicative)nodeArrayList3.get(0);

        pexpadditiveNode1 = new ASubtracaoExpAdditive(pexpadditiveNode2, tmenosNode3, pexpmultiplicativeNode4);
        }
	nodeList.add(pexpadditiveNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AMultiplicacaoExpAdditive */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpAdditive pexpadditiveNode1;
        {
            // Block
        PExpMultiplicative pexpmultiplicativeNode2;
        pexpmultiplicativeNode2 = (PExpMultiplicative)nodeArrayList1.get(0);

        pexpadditiveNode1 = new AMultiplicacaoExpAdditive(pexpmultiplicativeNode2);
        }
	nodeList.add(pexpadditiveNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AMultiplicacaoExpMultiplicative */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpMultiplicative pexpmultiplicativeNode1;
        {
            // Block
        PExpMultiplicative pexpmultiplicativeNode2;
        TMult tmultNode3;
        PExpUnary pexpunaryNode4;
        pexpmultiplicativeNode2 = (PExpMultiplicative)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        pexpunaryNode4 = (PExpUnary)nodeArrayList3.get(0);

        pexpmultiplicativeNode1 = new AMultiplicacaoExpMultiplicative(pexpmultiplicativeNode2, tmultNode3, pexpunaryNode4);
        }
	nodeList.add(pexpmultiplicativeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ADivisaoExpMultiplicative */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpMultiplicative pexpmultiplicativeNode1;
        {
            // Block
        PExpMultiplicative pexpmultiplicativeNode2;
        TDivisao tdivisaoNode3;
        PExpUnary pexpunaryNode4;
        pexpmultiplicativeNode2 = (PExpMultiplicative)nodeArrayList1.get(0);
        tdivisaoNode3 = (TDivisao)nodeArrayList2.get(0);
        pexpunaryNode4 = (PExpUnary)nodeArrayList3.get(0);

        pexpmultiplicativeNode1 = new ADivisaoExpMultiplicative(pexpmultiplicativeNode2, tdivisaoNode3, pexpunaryNode4);
        }
	nodeList.add(pexpmultiplicativeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AUnarioExpMultiplicative */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpMultiplicative pexpmultiplicativeNode1;
        {
            // Block
        PExpUnary pexpunaryNode2;
        pexpunaryNode2 = (PExpUnary)nodeArrayList1.get(0);

        pexpmultiplicativeNode1 = new AUnarioExpMultiplicative(pexpunaryNode2);
        }
	nodeList.add(pexpmultiplicativeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ANegativoExpUnary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpUnary pexpunaryNode1;
        {
            // Block
        TMenos tmenosNode2;
        PExpUnary pexpunaryNode3;
        tmenosNode2 = (TMenos)nodeArrayList1.get(0);
        pexpunaryNode3 = (PExpUnary)nodeArrayList2.get(0);

        pexpunaryNode1 = new ANegativoExpUnary(tmenosNode2, pexpunaryNode3);
        }
	nodeList.add(pexpunaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ANegacaoExpUnary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpUnary pexpunaryNode1;
        {
            // Block
        TNao tnaoNode2;
        PExpUnary pexpunaryNode3;
        tnaoNode2 = (TNao)nodeArrayList1.get(0);
        pexpunaryNode3 = (PExpUnary)nodeArrayList2.get(0);

        pexpunaryNode1 = new ANegacaoExpUnary(tnaoNode2, pexpunaryNode3);
        }
	nodeList.add(pexpunaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce APrimarioExpUnary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpUnary pexpunaryNode1;
        {
            // Block
        PPrimary pprimaryNode2;
        pprimaryNode2 = (PPrimary)nodeArrayList1.get(0);

        pexpunaryNode1 = new APrimarioExpUnary(pprimaryNode2);
        }
	nodeList.add(pexpunaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AValorPrimary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimary pprimaryNode1;
        {
            // Block
        PValor pvalorNode2;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);

        pprimaryNode1 = new AValorPrimary(pvalorNode2);
        }
	nodeList.add(pprimaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AVarPrimary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimary pprimaryNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pprimaryNode1 = new AVarPrimary(pvarNode2);
        }
	nodeList.add(pprimaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AParExpPrimary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimary pprimaryNode1;
        {
            // Block
        TParE tpareNode2;
        PExpression pexpressionNode3;
        TParD tpardNode4;
        tpareNode2 = (TParE)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tpardNode4 = (TParD)nodeArrayList3.get(0);

        pprimaryNode1 = new AParExpPrimary(tpareNode2, pexpressionNode3, tpardNode4);
        }
	nodeList.add(pprimaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ATerminal$Decl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDecl pdeclNode1;
        pdeclNode1 = (PDecl)nodeArrayList1.get(0);
	if(pdeclNode1 != null)
	{
	  listNode2.add(pdeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce ANonTerminal$Decl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDecl pdeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclNode2 = (PDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclNode2 != null)
	{
	  listNode3.add(pdeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ATerminal$Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PCommand pcommandNode1;
        pcommandNode1 = (PCommand)nodeArrayList1.get(0);
	if(pcommandNode1 != null)
	{
	  listNode2.add(pcommandNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ANonTerminal$Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PCommand pcommandNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcommandNode2 = (PCommand)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommandNode2 != null)
	{
	  listNode3.add(pcommandNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ATerminal$Varlist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVarlist pvarlistNode1;
        pvarlistNode1 = (PVarlist)nodeArrayList1.get(0);
	if(pvarlistNode1 != null)
	{
	  listNode2.add(pvarlistNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ANonTerminal$Varlist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVarlist pvarlistNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvarlistNode2 = (PVarlist)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvarlistNode2 != null)
	{
	  listNode3.add(pvarlistNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ATerminal$Explist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExplist pexplistNode1;
        pexplistNode1 = (PExplist)nodeArrayList1.get(0);
	if(pexplistNode1 != null)
	{
	  listNode2.add(pexplistNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ANonTerminal$Explist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExplist pexplistNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexplistNode2 = (PExplist)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexplistNode2 != null)
	{
	  listNode3.add(pexplistNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ATerminal$Casepart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PCasepart pcasepartNode1;
        pcasepartNode1 = (PCasepart)nodeArrayList1.get(0);
	if(pcasepartNode1 != null)
	{
	  listNode2.add(pcasepartNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ANonTerminal$Casepart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PCasepart pcasepartNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcasepartNode2 = (PCasepart)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcasepartNode2 != null)
	{
	  listNode3.add(pcasepartNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {46, SHIFT, 4}, },
			{{-1, ERROR, 2}, {55, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 4}, {1, SHIFT, 5}, },
			{{-1, ERROR, 5}, {2, SHIFT, 6}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {21, SHIFT, 14}, {22, SHIFT, 15}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 7}, {39, SHIFT, 23}, },
			{{-1, ERROR, 8}, {39, SHIFT, 24}, },
			{{-1, ERROR, 9}, {39, SHIFT, 25}, },
			{{-1, ERROR, 10}, {39, SHIFT, 26}, },
			{{-1, ERROR, 11}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, ERROR, 12}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, ERROR, 13}, {39, SHIFT, 29}, },
			{{-1, ERROR, 14}, {46, SHIFT, 30}, },
			{{-1, ERROR, 15}, {44, SHIFT, 31}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 19}, {37, SHIFT, 32}, },
			{{-1, REDUCE, 61}, },
			{{-1, ERROR, 21}, {2, SHIFT, 33}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {21, SHIFT, 14}, {22, SHIFT, 15}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, ERROR, 22}, {2, SHIFT, 36}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, ERROR, 23}, {24, SHIFT, 38}, {36, SHIFT, 39}, {39, SHIFT, 40}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 41}, {49, SHIFT, 42}, {50, SHIFT, 43}, },
			{{-1, ERROR, 24}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, ERROR, 25}, {24, SHIFT, 38}, {36, SHIFT, 39}, {39, SHIFT, 40}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 41}, {49, SHIFT, 42}, {50, SHIFT, 43}, },
			{{-1, ERROR, 26}, {24, SHIFT, 38}, {36, SHIFT, 39}, {39, SHIFT, 40}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 41}, {49, SHIFT, 42}, {50, SHIFT, 43}, },
			{{-1, ERROR, 27}, {12, SHIFT, 64}, },
			{{-1, ERROR, 28}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {15, SHIFT, 65}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, ERROR, 29}, {24, SHIFT, 38}, {36, SHIFT, 39}, {39, SHIFT, 40}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 41}, {49, SHIFT, 42}, {50, SHIFT, 43}, },
			{{-1, ERROR, 30}, {48, SHIFT, 41}, {49, SHIFT, 42}, {50, SHIFT, 43}, },
			{{-1, ERROR, 31}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, ERROR, 32}, {24, SHIFT, 38}, {36, SHIFT, 39}, {39, SHIFT, 40}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 41}, {49, SHIFT, 42}, {50, SHIFT, 43}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 35}, {2, SHIFT, 71}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 38}, {24, SHIFT, 38}, {36, SHIFT, 39}, {39, SHIFT, 40}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 41}, {49, SHIFT, 42}, {50, SHIFT, 43}, },
			{{-1, ERROR, 39}, {24, SHIFT, 38}, {36, SHIFT, 39}, {39, SHIFT, 40}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 41}, {49, SHIFT, 42}, {50, SHIFT, 43}, },
			{{-1, ERROR, 40}, {24, SHIFT, 38}, {36, SHIFT, 39}, {39, SHIFT, 40}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 41}, {49, SHIFT, 42}, {50, SHIFT, 43}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 47}, {38, SHIFT, 75}, {43, SHIFT, 76}, },
			{{-1, REDUCE, 31}, {34, SHIFT, 77}, },
			{{-1, REDUCE, 34}, {33, SHIFT, 78}, },
			{{-1, REDUCE, 36}, {35, SHIFT, 79}, },
			{{-1, REDUCE, 38}, {27, SHIFT, 80}, {28, SHIFT, 81}, },
			{{-1, REDUCE, 41}, {29, SHIFT, 82}, {30, SHIFT, 83}, {31, SHIFT, 84}, {32, SHIFT, 85}, },
			{{-1, REDUCE, 46}, {23, SHIFT, 86}, {24, SHIFT, 87}, },
			{{-1, REDUCE, 49}, {25, SHIFT, 88}, {26, SHIFT, 89}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 57}, {24, SHIFT, 38}, {36, SHIFT, 39}, {39, SHIFT, 40}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 41}, {49, SHIFT, 42}, {50, SHIFT, 43}, },
			{{-1, ERROR, 58}, {38, SHIFT, 92}, {43, SHIFT, 93}, },
			{{-1, REDUCE, 63}, },
			{{-1, ERROR, 60}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, ERROR, 61}, {38, SHIFT, 96}, },
			{{-1, REDUCE, 32}, {34, SHIFT, 77}, },
			{{-1, ERROR, 63}, {38, SHIFT, 97}, },
			{{-1, ERROR, 64}, {48, SHIFT, 98}, },
			{{-1, ERROR, 65}, {39, SHIFT, 99}, },
			{{-1, ERROR, 66}, {38, SHIFT, 100}, },
			{{-1, ERROR, 67}, {45, SHIFT, 101}, },
			{{-1, ERROR, 68}, {43, SHIFT, 93}, {45, SHIFT, 102}, },
			{{-1, ERROR, 69}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, ERROR, 70}, {45, SHIFT, 104}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 74}, {38, SHIFT, 105}, },
			{{-1, ERROR, 75}, {45, SHIFT, 106}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 77}, {24, SHIFT, 38}, {36, SHIFT, 39}, {39, SHIFT, 40}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 41}, {49, SHIFT, 42}, {50, SHIFT, 43}, },
			{{-1, ERROR, 78}, {24, SHIFT, 38}, {36, SHIFT, 39}, {39, SHIFT, 40}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 41}, {49, SHIFT, 42}, {50, SHIFT, 43}, },
			{{-1, ERROR, 79}, {24, SHIFT, 38}, {36, SHIFT, 39}, {39, SHIFT, 40}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 41}, {49, SHIFT, 42}, {50, SHIFT, 43}, },
			{{-1, ERROR, 80}, {24, SHIFT, 38}, {36, SHIFT, 39}, {39, SHIFT, 40}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 41}, {49, SHIFT, 42}, {50, SHIFT, 43}, },
			{{-1, ERROR, 81}, {24, SHIFT, 38}, {36, SHIFT, 39}, {39, SHIFT, 40}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 41}, {49, SHIFT, 42}, {50, SHIFT, 43}, },
			{{-1, ERROR, 82}, {24, SHIFT, 38}, {36, SHIFT, 39}, {39, SHIFT, 40}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 41}, {49, SHIFT, 42}, {50, SHIFT, 43}, },
			{{-1, ERROR, 83}, {24, SHIFT, 38}, {36, SHIFT, 39}, {39, SHIFT, 40}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 41}, {49, SHIFT, 42}, {50, SHIFT, 43}, },
			{{-1, ERROR, 84}, {24, SHIFT, 38}, {36, SHIFT, 39}, {39, SHIFT, 40}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 41}, {49, SHIFT, 42}, {50, SHIFT, 43}, },
			{{-1, ERROR, 85}, {24, SHIFT, 38}, {36, SHIFT, 39}, {39, SHIFT, 40}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 41}, {49, SHIFT, 42}, {50, SHIFT, 43}, },
			{{-1, ERROR, 86}, {24, SHIFT, 38}, {36, SHIFT, 39}, {39, SHIFT, 40}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 41}, {49, SHIFT, 42}, {50, SHIFT, 43}, },
			{{-1, ERROR, 87}, {24, SHIFT, 38}, {36, SHIFT, 39}, {39, SHIFT, 40}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 41}, {49, SHIFT, 42}, {50, SHIFT, 43}, },
			{{-1, ERROR, 88}, {24, SHIFT, 38}, {36, SHIFT, 39}, {39, SHIFT, 40}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 41}, {49, SHIFT, 42}, {50, SHIFT, 43}, },
			{{-1, ERROR, 89}, {24, SHIFT, 38}, {36, SHIFT, 39}, {39, SHIFT, 40}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 41}, {49, SHIFT, 42}, {50, SHIFT, 43}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 91}, {38, SHIFT, 120}, {43, SHIFT, 76}, },
			{{-1, ERROR, 92}, {45, SHIFT, 121}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 94}, {38, SHIFT, 122}, {43, SHIFT, 93}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 96}, {16, SHIFT, 123}, },
			{{-1, ERROR, 97}, {8, SHIFT, 124}, },
			{{-1, ERROR, 98}, {13, SHIFT, 125}, {15, SHIFT, 126}, },
			{{-1, ERROR, 99}, {24, SHIFT, 38}, {36, SHIFT, 39}, {39, SHIFT, 40}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 41}, {49, SHIFT, 42}, {50, SHIFT, 43}, },
			{{-1, ERROR, 100}, {19, SHIFT, 128}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 103}, {43, SHIFT, 93}, {45, SHIFT, 131}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 33}, {33, SHIFT, 78}, },
			{{-1, REDUCE, 35}, {35, SHIFT, 79}, },
			{{-1, REDUCE, 37}, {27, SHIFT, 80}, {28, SHIFT, 81}, },
			{{-1, REDUCE, 39}, {29, SHIFT, 82}, {30, SHIFT, 83}, {31, SHIFT, 84}, {32, SHIFT, 85}, },
			{{-1, REDUCE, 40}, {29, SHIFT, 82}, {30, SHIFT, 83}, {31, SHIFT, 84}, {32, SHIFT, 85}, },
			{{-1, REDUCE, 42}, {23, SHIFT, 86}, {24, SHIFT, 87}, },
			{{-1, REDUCE, 43}, {23, SHIFT, 86}, {24, SHIFT, 87}, },
			{{-1, REDUCE, 45}, {23, SHIFT, 86}, {24, SHIFT, 87}, },
			{{-1, REDUCE, 44}, {23, SHIFT, 86}, {24, SHIFT, 87}, },
			{{-1, REDUCE, 47}, {25, SHIFT, 88}, {26, SHIFT, 89}, },
			{{-1, REDUCE, 48}, {25, SHIFT, 88}, {26, SHIFT, 89}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 120}, {45, SHIFT, 132}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 122}, {45, SHIFT, 133}, },
			{{-1, ERROR, 123}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, ERROR, 124}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, ERROR, 125}, {48, SHIFT, 136}, },
			{{-1, ERROR, 126}, {48, SHIFT, 137}, },
			{{-1, ERROR, 127}, {38, SHIFT, 138}, },
			{{-1, ERROR, 128}, {48, SHIFT, 41}, {49, SHIFT, 42}, {50, SHIFT, 43}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 130}, {9, SHIFT, 140}, {19, SHIFT, 128}, {20, SHIFT, 141}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 134}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {6, SHIFT, 144}, {7, SHIFT, 10}, {11, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, ERROR, 135}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {9, SHIFT, 145}, {10, SHIFT, 146}, {11, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, ERROR, 136}, {15, SHIFT, 148}, },
			{{-1, ERROR, 137}, {16, SHIFT, 149}, },
			{{-1, ERROR, 138}, {45, SHIFT, 150}, },
			{{-1, ERROR, 139}, {44, SHIFT, 151}, },
			{{-1, ERROR, 140}, {44, SHIFT, 152}, },
			{{-1, ERROR, 141}, {45, SHIFT, 153}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 143}, {20, SHIFT, 154}, },
			{{-1, ERROR, 144}, {45, SHIFT, 155}, },
			{{-1, ERROR, 145}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, ERROR, 146}, {45, SHIFT, 157}, },
			{{-1, ERROR, 147}, {10, SHIFT, 158}, },
			{{-1, ERROR, 148}, {48, SHIFT, 159}, },
			{{-1, ERROR, 149}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 151}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, ERROR, 152}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 154}, {45, SHIFT, 163}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 27}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 158}, {45, SHIFT, 164}, },
			{{-1, ERROR, 159}, {16, SHIFT, 165}, },
			{{-1, ERROR, 160}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {14, SHIFT, 166}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, REDUCE, 28}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, REDUCE, 29}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 165}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, ERROR, 166}, {45, SHIFT, 168}, },
			{{-1, ERROR, 167}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {14, SHIFT, 169}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 169}, {45, SHIFT, 170}, },
			{{-1, REDUCE, 26}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 18}, {21, 34}, },
			{{-1, 44}, {5, 19}, {11, 27}, {12, 19}, {21, 19}, {22, 19}, {24, 58}, {28, 19}, {31, 68}, {35, 19}, {60, 94}, {69, 103}, {123, 19}, {124, 19}, {134, 19}, {135, 19}, {145, 19}, {149, 19}, {151, 19}, {152, 19}, {156, 19}, {160, 19}, {161, 19}, {162, 19}, {165, 19}, {167, 19}, },
			{{-1, 59}, {60, 95}, {69, 95}, },
			{{-1, 45}, {30, 67}, {128, 139}, },
			{{-1, 20}, {22, 37}, {28, 37}, {35, 37}, {134, 37}, {135, 37}, {156, 37}, {160, 37}, {161, 37}, {162, 37}, {167, 37}, },
			{{-1, 147}, },
			{{-1, 129}, {130, 142}, },
			{{-1, 143}, },
			{{-1, 46}, {57, 90}, },
			{{-1, 47}, {29, 66}, {32, 70}, {40, 74}, {57, 91}, },
			{{-1, 61}, {26, 63}, {99, 127}, },
			{{-1, 48}, {25, 62}, {26, 62}, {99, 62}, },
			{{-1, 49}, {77, 107}, },
			{{-1, 50}, {78, 108}, },
			{{-1, 51}, {79, 109}, },
			{{-1, 52}, {80, 110}, {81, 111}, },
			{{-1, 53}, {82, 112}, {83, 113}, {84, 114}, {85, 115}, },
			{{-1, 54}, {86, 116}, {87, 117}, },
			{{-1, 55}, {38, 72}, {39, 73}, {88, 118}, {89, 119}, },
			{{-1, 56}, },
			{{-1, 21}, },
			{{-1, 22}, {12, 28}, {21, 35}, {123, 134}, {124, 135}, {145, 156}, {149, 160}, {151, 161}, {152, 162}, {165, 167}, },
			{{-1, 60}, {31, 69}, },
			{{-1, 57}, },
			{{-1, 130}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'programa'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'inicio'",
			"expecting: 'fim.', 'escreva', 'leia', 'enquanto', 'se', 'para', 'repita', 'avalie', 'const', tipo, id, id array",
			"expecting: '('",
			"expecting: id, id array",
			"expecting: 'escreva', 'leia', 'enquanto', 'se', 'para', 'repita', 'avalie', id, id array",
			"expecting: ':'",
			"expecting: 'de', '+', '-', '/', '*', '=', '<>', '>', '<', '<=', '>=', 'e', 'ou', 'xor', '<-', ')', ',', ';'",
			"expecting: '<-'",
			"expecting: 'fim.', 'escreva', 'leia', 'enquanto', 'fim enquanto', 'se', 'senao', 'fim se', 'para', 'fim para', 'ate', 'repita', 'avalie', 'caso', 'fim avalie', id, id array",
			"expecting: 'fim.', 'escreva', 'leia', 'enquanto', 'se', 'para', 'repita', 'avalie', id, id array",
			"expecting: '-', 'nao', '(', id, id array, n int, n real, string",
			"expecting: 'de'",
			"expecting: 'escreva', 'leia', 'enquanto', 'se', 'para', 'ate', 'repita', 'avalie', id, id array",
			"expecting: n int, n real, string",
			"expecting: '+', '-', '/', '*', '=', '<>', '>', '<', '<=', '>=', 'e', 'ou', 'xor', ')', ',', ':', ';'",
			"expecting: '+', '-', '/', '*', '=', '<>', '>', '<', '<=', '>=', 'e', 'ou', 'xor', ')', ',', ';'",
			"expecting: ')', ','",
			"expecting: 'ou', ')', ',', ';'",
			"expecting: 'e', 'ou', ')', ',', ';'",
			"expecting: 'e', 'ou', 'xor', ')', ',', ';'",
			"expecting: '=', '<>', 'e', 'ou', 'xor', ')', ',', ';'",
			"expecting: '=', '<>', '>', '<', '<=', '>=', 'e', 'ou', 'xor', ')', ',', ';'",
			"expecting: '+', '-', '=', '<>', '>', '<', '<=', '>=', 'e', 'ou', 'xor', ')', ',', ';'",
			"expecting: ')'",
			"expecting: 'ou', ')'",
			"expecting: n int",
			"expecting: ';'",
			"expecting: ',', ';'",
			"expecting: 'faca'",
			"expecting: 'entao'",
			"expecting: 'passo', 'ate'",
			"expecting: 'caso'",
			"expecting: 'senao', 'caso', 'fim avalie'",
			"expecting: 'escreva', 'leia', 'enquanto', 'fim enquanto', 'se', 'para', 'repita', 'avalie', id, id array",
			"expecting: 'escreva', 'leia', 'enquanto', 'se', 'senao', 'fim se', 'para', 'repita', 'avalie', id, id array",
			"expecting: 'ate'",
			"expecting: 'fim avalie'",
			"expecting: 'fim se'",
			"expecting: 'escreva', 'leia', 'enquanto', 'se', 'fim se', 'para', 'repita', 'avalie', id, id array",
			"expecting: 'escreva', 'leia', 'enquanto', 'se', 'para', 'fim para', 'repita', 'avalie', id, id array",
			"expecting: 'escreva', 'leia', 'enquanto', 'se', 'senao', 'para', 'repita', 'avalie', 'caso', 'fim avalie', id, id array",
			"expecting: 'escreva', 'leia', 'enquanto', 'se', 'para', 'repita', 'avalie', 'fim avalie', id, id array",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 4, 2, 5, 5, 5, 5, 6, 7, 5, 1, 8, 9, 9, 4, 10, 11, 4, 12, 13, 6, 13, 13, 14, 15, 13, 16, 6, 13, 2, 4, 12, 2, 11, 13, 13, 13, 17, 17, 17, 18, 18, 13, 19, 20, 21, 22, 23, 24, 25, 18, 18, 18, 13, 19, 6, 6, 26, 27, 26, 28, 5, 26, 29, 30, 6, 29, 2, 18, 18, 26, 29, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 19, 29, 6, 19, 6, 31, 32, 33, 13, 34, 4, 4, 30, 11, 18, 11, 21, 22, 23, 24, 24, 25, 25, 25, 25, 18, 18, 18, 18, 29, 11, 29, 7, 7, 28, 28, 26, 16, 35, 35, 4, 11, 11, 36, 37, 38, 31, 29, 8, 8, 29, 35, 39, 29, 7, 29, 40, 28, 7, 11, 7, 7, 11, 29, 11, 41, 11, 29, 31, 42, 43, 44, 11, 11, 7, 29, 42, 11, 29, 11, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
