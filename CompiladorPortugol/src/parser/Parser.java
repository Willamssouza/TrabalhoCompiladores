/* This file was generated by SableCC (http://www.sablecc.org/). */

package parser;

import lexer.*;
import node.*;
import analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PStart node1 = (PStart) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AStartStart */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAprogramprogram1Program */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AAprogramprogram2Program */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AAprogramprogram3Program */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce AAprogramprogram4Program */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list, false);
            }
            break;
            case 5: /* reduce AAvariabledecl1Decl */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce AAvariabledecl2Decl */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list, false);
            }
            break;
            case 7: /* reduce AConstantDecl */
            {
                ArrayList<Object> list = new7();
                push(goTo(2), list, false);
            }
            break;
            case 8: /* reduce AIdVar */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list, false);
            }
            break;
            case 9: /* reduce AIdArrayVar */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list, false);
            }
            break;
            case 10: /* reduce AVarlist */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list, false);
            }
            break;
            case 11: /* reduce AStringValor */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list, false);
            }
            break;
            case 12: /* reduce AIntegerValor */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list, false);
            }
            break;
            case 13: /* reduce ARealValor */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list, false);
            }
            break;
            case 14: /* reduce AAttributionCommand */
            {
                ArrayList<Object> list = new14();
                push(goTo(6), list, false);
            }
            break;
            case 15: /* reduce AAreadcommand1Command */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list, false);
            }
            break;
            case 16: /* reduce AAreadcommand2Command */
            {
                ArrayList<Object> list = new16();
                push(goTo(6), list, false);
            }
            break;
            case 17: /* reduce AAwritecommand1Command */
            {
                ArrayList<Object> list = new17();
                push(goTo(6), list, false);
            }
            break;
            case 18: /* reduce AAwritecommand2Command */
            {
                ArrayList<Object> list = new18();
                push(goTo(6), list, false);
            }
            break;
            case 19: /* reduce AAifcommand1Command */
            {
                ArrayList<Object> list = new19();
                push(goTo(6), list, false);
            }
            break;
            case 20: /* reduce AAifcommand2Command */
            {
                ArrayList<Object> list = new20();
                push(goTo(6), list, false);
            }
            break;
            case 21: /* reduce AAswitchcommand1Command */
            {
                ArrayList<Object> list = new21();
                push(goTo(6), list, false);
            }
            break;
            case 22: /* reduce AAswitchcommand2Command */
            {
                ArrayList<Object> list = new22();
                push(goTo(6), list, false);
            }
            break;
            case 23: /* reduce AWhileCommand */
            {
                ArrayList<Object> list = new23();
                push(goTo(6), list, false);
            }
            break;
            case 24: /* reduce ARepeatCommand */
            {
                ArrayList<Object> list = new24();
                push(goTo(6), list, false);
            }
            break;
            case 25: /* reduce AForCommand */
            {
                ArrayList<Object> list = new25();
                push(goTo(6), list, false);
            }
            break;
            case 26: /* reduce AForPassoCommand */
            {
                ArrayList<Object> list = new26();
                push(goTo(6), list, false);
            }
            break;
            case 27: /* reduce AElsepart */
            {
                ArrayList<Object> list = new27();
                push(goTo(7), list, false);
            }
            break;
            case 28: /* reduce ACasepart */
            {
                ArrayList<Object> list = new28();
                push(goTo(8), list, false);
            }
            break;
            case 29: /* reduce AElseswitch */
            {
                ArrayList<Object> list = new29();
                push(goTo(9), list, false);
            }
            break;
            case 30: /* reduce AExpSumExp */
            {
                ArrayList<Object> list = new30();
                push(goTo(10), list, false);
            }
            break;
            case 31: /* reduce AExpSubExp */
            {
                ArrayList<Object> list = new31();
                push(goTo(10), list, false);
            }
            break;
            case 32: /* reduce AExpTermExp */
            {
                ArrayList<Object> list = new32();
                push(goTo(10), list, false);
            }
            break;
            case 33: /* reduce AExplist */
            {
                ArrayList<Object> list = new33();
                push(goTo(11), list, false);
            }
            break;
            case 34: /* reduce ATermMultTerm */
            {
                ArrayList<Object> list = new34();
                push(goTo(12), list, false);
            }
            break;
            case 35: /* reduce ATermDivTerm */
            {
                ArrayList<Object> list = new35();
                push(goTo(12), list, false);
            }
            break;
            case 36: /* reduce ATermFactorTerm */
            {
                ArrayList<Object> list = new36();
                push(goTo(12), list, false);
            }
            break;
            case 37: /* reduce AValorFactor */
            {
                ArrayList<Object> list = new37();
                push(goTo(13), list, false);
            }
            break;
            case 38: /* reduce AVarFactor */
            {
                ArrayList<Object> list = new38();
                push(goTo(13), list, false);
            }
            break;
            case 39: /* reduce AParExpFactor */
            {
                ArrayList<Object> list = new39();
                push(goTo(13), list, false);
            }
            break;
            case 40: /* reduce AOrExplogic */
            {
                ArrayList<Object> list = new40();
                push(goTo(14), list, false);
            }
            break;
            case 41: /* reduce AXorExplogic */
            {
                ArrayList<Object> list = new41();
                push(goTo(14), list, false);
            }
            break;
            case 42: /* reduce ATermLogicExplogic */
            {
                ArrayList<Object> list = new42();
                push(goTo(14), list, false);
            }
            break;
            case 43: /* reduce AAndTermlogic */
            {
                ArrayList<Object> list = new43();
                push(goTo(15), list, false);
            }
            break;
            case 44: /* reduce AFactorLogicTermlogic */
            {
                ArrayList<Object> list = new44();
                push(goTo(15), list, false);
            }
            break;
            case 45: /* reduce ANotFactorlogic */
            {
                ArrayList<Object> list = new45();
                push(goTo(16), list, false);
            }
            break;
            case 46: /* reduce AParExpFactorlogic */
            {
                ArrayList<Object> list = new46();
                push(goTo(16), list, false);
            }
            break;
            case 47: /* reduce AExpRelationalFactorlogic */
            {
                ArrayList<Object> list = new47();
                push(goTo(16), list, false);
            }
            break;
            case 48: /* reduce AExprelational */
            {
                ArrayList<Object> list = new48();
                push(goTo(17), list, false);
            }
            break;
            case 49: /* reduce AIgualOperator */
            {
                ArrayList<Object> list = new49();
                push(goTo(18), list, false);
            }
            break;
            case 50: /* reduce ADiferenteOperator */
            {
                ArrayList<Object> list = new50();
                push(goTo(18), list, false);
            }
            break;
            case 51: /* reduce AMaiorOperator */
            {
                ArrayList<Object> list = new51();
                push(goTo(18), list, false);
            }
            break;
            case 52: /* reduce AMenorOperator */
            {
                ArrayList<Object> list = new52();
                push(goTo(18), list, false);
            }
            break;
            case 53: /* reduce AMaiorIgualOperator */
            {
                ArrayList<Object> list = new53();
                push(goTo(18), list, false);
            }
            break;
            case 54: /* reduce AMenorIgualOperator */
            {
                ArrayList<Object> list = new54();
                push(goTo(18), list, false);
            }
            break;
            case 55: /* reduce ATerminal$Decl */
            {
                ArrayList<Object> list = new55();
                push(goTo(19), list, true);
            }
            break;
            case 56: /* reduce ANonTerminal$Decl */
            {
                ArrayList<Object> list = new56();
                push(goTo(19), list, true);
            }
            break;
            case 57: /* reduce ATerminal$Command */
            {
                ArrayList<Object> list = new57();
                push(goTo(20), list, true);
            }
            break;
            case 58: /* reduce ANonTerminal$Command */
            {
                ArrayList<Object> list = new58();
                push(goTo(20), list, true);
            }
            break;
            case 59: /* reduce ATerminal$Varlist */
            {
                ArrayList<Object> list = new59();
                push(goTo(21), list, true);
            }
            break;
            case 60: /* reduce ANonTerminal$Varlist */
            {
                ArrayList<Object> list = new60();
                push(goTo(21), list, true);
            }
            break;
            case 61: /* reduce ATerminal$Explist */
            {
                ArrayList<Object> list = new61();
                push(goTo(22), list, true);
            }
            break;
            case 62: /* reduce ANonTerminal$Explist */
            {
                ArrayList<Object> list = new62();
                push(goTo(22), list, true);
            }
            break;
            case 63: /* reduce ATerminal$Casepart */
            {
                ArrayList<Object> list = new63();
                push(goTo(23), list, true);
            }
            break;
            case 64: /* reduce ANonTerminal$Casepart */
            {
                ArrayList<Object> list = new64();
                push(goTo(23), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AStartStart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        PProgram pprogramNode2;
        pprogramNode2 = (PProgram)nodeArrayList1.get(0);

        pstartNode1 = new AStartStart(pprogramNode2);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprogramprogram1Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        TPrograma tprogramaNode2;
        TId tidNode3;
        TInicio tinicioNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TFim tfimNode7;
        tprogramaNode2 = (TPrograma)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tinicioNode4 = (TInicio)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        }
        tfimNode7 = (TFim)nodeArrayList4.get(0);

        pprogramNode1 = new AProgramProgram(tprogramaNode2, tidNode3, tinicioNode4, listNode5, listNode6, tfimNode7);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAprogramprogram2Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        TPrograma tprogramaNode2;
        TId tidNode3;
        TInicio tinicioNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TFim tfimNode8;
        tprogramaNode2 = (TPrograma)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tinicioNode4 = (TInicio)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        }
        tfimNode8 = (TFim)nodeArrayList5.get(0);

        pprogramNode1 = new AProgramProgram(tprogramaNode2, tidNode3, tinicioNode4, listNode6, listNode7, tfimNode8);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAprogramprogram3Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        TPrograma tprogramaNode2;
        TId tidNode3;
        TInicio tinicioNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TFim tfimNode8;
        tprogramaNode2 = (TPrograma)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tinicioNode4 = (TInicio)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tfimNode8 = (TFim)nodeArrayList5.get(0);

        pprogramNode1 = new AProgramProgram(tprogramaNode2, tidNode3, tinicioNode4, listNode5, listNode7, tfimNode8);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAprogramprogram4Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        TPrograma tprogramaNode2;
        TId tidNode3;
        TInicio tinicioNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TFim tfimNode9;
        tprogramaNode2 = (TPrograma)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tinicioNode4 = (TInicio)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList5.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tfimNode9 = (TFim)nodeArrayList6.get(0);

        pprogramNode1 = new AProgramProgram(tprogramaNode2, tidNode3, tinicioNode4, listNode6, listNode8, tfimNode9);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAvariabledecl1Decl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecl pdeclNode1;
        {
            // Block
        TTipo ttipoNode2;
        TDoisPontos tdoispontosNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PVar pvarNode5;
        TSemicolon tsemicolonNode6;
        ttipoNode2 = (TTipo)nodeArrayList1.get(0);
        tdoispontosNode3 = (TDoisPontos)nodeArrayList2.get(0);
        {
            // Block
        }
        pvarNode5 = (PVar)nodeArrayList3.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList4.get(0);

        pdeclNode1 = new AVariableDecl(ttipoNode2, tdoispontosNode3, listNode4, pvarNode5, tsemicolonNode6);
        }
	nodeList.add(pdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAvariabledecl2Decl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecl pdeclNode1;
        {
            // Block
        TTipo ttipoNode2;
        TDoisPontos tdoispontosNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PVar pvarNode6;
        TSemicolon tsemicolonNode7;
        ttipoNode2 = (TTipo)nodeArrayList1.get(0);
        tdoispontosNode3 = (TDoisPontos)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pvarNode6 = (PVar)nodeArrayList4.get(0);
        tsemicolonNode7 = (TSemicolon)nodeArrayList5.get(0);

        pdeclNode1 = new AVariableDecl(ttipoNode2, tdoispontosNode3, listNode5, pvarNode6, tsemicolonNode7);
        }
	nodeList.add(pdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AConstantDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecl pdeclNode1;
        {
            // Block
        TConst tconstNode2;
        TId tidNode3;
        PValor pvalorNode4;
        tconstNode2 = (TConst)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        pvalorNode4 = (PValor)nodeArrayList3.get(0);

        pdeclNode1 = new AConstantDecl(tconstNode2, tidNode3, pvalorNode4);
        }
	nodeList.add(pdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AIdVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvarNode1 = new AIdVar(tidNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AIdArrayVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TIdArray tidarrayNode2;
        tidarrayNode2 = (TIdArray)nodeArrayList1.get(0);

        pvarNode1 = new AIdArrayVar(tidarrayNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AVarlist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarlist pvarlistNode1;
        {
            // Block
        PVar pvarNode2;
        TVirgula tvirgulaNode3;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tvirgulaNode3 = (TVirgula)nodeArrayList2.get(0);

        pvarlistNode1 = new AVarlist(pvarNode2, tvirgulaNode3);
        }
	nodeList.add(pvarlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AStringValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pvalorNode1 = new AStringValor(tstringNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AIntegerValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TNInt tnintNode2;
        tnintNode2 = (TNInt)nodeArrayList1.get(0);

        pvalorNode1 = new AIntegerValor(tnintNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ARealValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TNReal tnrealNode2;
        tnrealNode2 = (TNReal)nodeArrayList1.get(0);

        pvalorNode1 = new ARealValor(tnrealNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAttributionCommand */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        PVar pvarNode2;
        TAtribuicao tatribuicaoNode3;
        PExp pexpNode4;
        TSemicolon tsemicolonNode5;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tatribuicaoNode3 = (TAtribuicao)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        pcommandNode1 = new AAttributionCommand(pvarNode2, tatribuicaoNode3, pexpNode4, tsemicolonNode5);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAreadcommand1Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TLeia tleiaNode2;
        TParE tpareNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PVar pvarNode5;
        TParD tpardNode6;
        TSemicolon tsemicolonNode7;
        tleiaNode2 = (TLeia)nodeArrayList1.get(0);
        tpareNode3 = (TParE)nodeArrayList2.get(0);
        {
            // Block
        }
        pvarNode5 = (PVar)nodeArrayList3.get(0);
        tpardNode6 = (TParD)nodeArrayList4.get(0);
        tsemicolonNode7 = (TSemicolon)nodeArrayList5.get(0);

        pcommandNode1 = new AReadCommand(tleiaNode2, tpareNode3, listNode4, pvarNode5, tpardNode6, tsemicolonNode7);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAreadcommand2Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TLeia tleiaNode2;
        TParE tpareNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PVar pvarNode6;
        TParD tpardNode7;
        TSemicolon tsemicolonNode8;
        tleiaNode2 = (TLeia)nodeArrayList1.get(0);
        tpareNode3 = (TParE)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pvarNode6 = (PVar)nodeArrayList4.get(0);
        tpardNode7 = (TParD)nodeArrayList5.get(0);
        tsemicolonNode8 = (TSemicolon)nodeArrayList6.get(0);

        pcommandNode1 = new AReadCommand(tleiaNode2, tpareNode3, listNode5, pvarNode6, tpardNode7, tsemicolonNode8);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAwritecommand1Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TEscreva tescrevaNode2;
        TParE tpareNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PExp pexpNode5;
        TParD tpardNode6;
        TSemicolon tsemicolonNode7;
        tescrevaNode2 = (TEscreva)nodeArrayList1.get(0);
        tpareNode3 = (TParE)nodeArrayList2.get(0);
        {
            // Block
        }
        pexpNode5 = (PExp)nodeArrayList3.get(0);
        tpardNode6 = (TParD)nodeArrayList4.get(0);
        tsemicolonNode7 = (TSemicolon)nodeArrayList5.get(0);

        pcommandNode1 = new AWriteCommand(tescrevaNode2, tpareNode3, listNode4, pexpNode5, tpardNode6, tsemicolonNode7);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAwritecommand2Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TEscreva tescrevaNode2;
        TParE tpareNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PExp pexpNode6;
        TParD tpardNode7;
        TSemicolon tsemicolonNode8;
        tescrevaNode2 = (TEscreva)nodeArrayList1.get(0);
        tpareNode3 = (TParE)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pexpNode6 = (PExp)nodeArrayList4.get(0);
        tpardNode7 = (TParD)nodeArrayList5.get(0);
        tsemicolonNode8 = (TSemicolon)nodeArrayList6.get(0);

        pcommandNode1 = new AWriteCommand(tescrevaNode2, tpareNode3, listNode5, pexpNode6, tpardNode7, tsemicolonNode8);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAifcommand1Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TSe tseNode2;
        TParE tpareNode3;
        PExplogic pexplogicNode4;
        TParD tpardNode5;
        TEntao tentaoNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode9 = null;
        TFimSe tfimseNode10;
        TSemicolon tsemicolonNode11;
        tseNode2 = (TSe)nodeArrayList1.get(0);
        tpareNode3 = (TParE)nodeArrayList2.get(0);
        pexplogicNode4 = (PExplogic)nodeArrayList3.get(0);
        tpardNode5 = (TParD)nodeArrayList4.get(0);
        tentaoNode6 = (TEntao)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tfimseNode10 = (TFimSe)nodeArrayList7.get(0);
        tsemicolonNode11 = (TSemicolon)nodeArrayList8.get(0);

        pcommandNode1 = new AIfCommand(tseNode2, tpareNode3, pexplogicNode4, tpardNode5, tentaoNode6, listNode8, null, tfimseNode10, tsemicolonNode11);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAifcommand2Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TSe tseNode2;
        TParE tpareNode3;
        PExplogic pexplogicNode4;
        TParD tpardNode5;
        TEntao tentaoNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        PElsepart pelsepartNode9;
        TFimSe tfimseNode10;
        TSemicolon tsemicolonNode11;
        tseNode2 = (TSe)nodeArrayList1.get(0);
        tpareNode3 = (TParE)nodeArrayList2.get(0);
        pexplogicNode4 = (PExplogic)nodeArrayList3.get(0);
        tpardNode5 = (TParD)nodeArrayList4.get(0);
        tentaoNode6 = (TEntao)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        pelsepartNode9 = (PElsepart)nodeArrayList7.get(0);
        tfimseNode10 = (TFimSe)nodeArrayList8.get(0);
        tsemicolonNode11 = (TSemicolon)nodeArrayList9.get(0);

        pcommandNode1 = new AIfCommand(tseNode2, tpareNode3, pexplogicNode4, tpardNode5, tentaoNode6, listNode8, pelsepartNode9, tfimseNode10, tsemicolonNode11);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAswitchcommand1Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TAvalie tavalieNode2;
        TParE tpareNode3;
        PExp pexpNode4;
        TParD tpardNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode8 = null;
        TFimAvalie tfimavalieNode9;
        TSemicolon tsemicolonNode10;
        tavalieNode2 = (TAvalie)nodeArrayList1.get(0);
        tpareNode3 = (TParE)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tpardNode5 = (TParD)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tfimavalieNode9 = (TFimAvalie)nodeArrayList6.get(0);
        tsemicolonNode10 = (TSemicolon)nodeArrayList7.get(0);

        pcommandNode1 = new ASwitchCommand(tavalieNode2, tpareNode3, pexpNode4, tpardNode5, listNode7, null, tfimavalieNode9, tsemicolonNode10);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAswitchcommand2Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TAvalie tavalieNode2;
        TParE tpareNode3;
        PExp pexpNode4;
        TParD tpardNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        PElseswitch pelseswitchNode8;
        TFimAvalie tfimavalieNode9;
        TSemicolon tsemicolonNode10;
        tavalieNode2 = (TAvalie)nodeArrayList1.get(0);
        tpareNode3 = (TParE)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tpardNode5 = (TParD)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        pelseswitchNode8 = (PElseswitch)nodeArrayList6.get(0);
        tfimavalieNode9 = (TFimAvalie)nodeArrayList7.get(0);
        tsemicolonNode10 = (TSemicolon)nodeArrayList8.get(0);

        pcommandNode1 = new ASwitchCommand(tavalieNode2, tpareNode3, pexpNode4, tpardNode5, listNode7, pelseswitchNode8, tfimavalieNode9, tsemicolonNode10);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AWhileCommand */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TEnquanto tenquantoNode2;
        TParE tpareNode3;
        PExplogic pexplogicNode4;
        TParD tpardNode5;
        TFaca tfacaNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TFimEnquanto tfimenquantoNode9;
        TSemicolon tsemicolonNode10;
        tenquantoNode2 = (TEnquanto)nodeArrayList1.get(0);
        tpareNode3 = (TParE)nodeArrayList2.get(0);
        pexplogicNode4 = (PExplogic)nodeArrayList3.get(0);
        tpardNode5 = (TParD)nodeArrayList4.get(0);
        tfacaNode6 = (TFaca)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tfimenquantoNode9 = (TFimEnquanto)nodeArrayList7.get(0);
        tsemicolonNode10 = (TSemicolon)nodeArrayList8.get(0);

        pcommandNode1 = new AWhileCommand(tenquantoNode2, tpareNode3, pexplogicNode4, tpardNode5, tfacaNode6, listNode8, tfimenquantoNode9, tsemicolonNode10);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ARepeatCommand */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TRepita trepitaNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TAte tateNode5;
        TParE tpareNode6;
        PExplogic pexplogicNode7;
        TParD tpardNode8;
        TSemicolon tsemicolonNode9;
        trepitaNode2 = (TRepita)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tateNode5 = (TAte)nodeArrayList3.get(0);
        tpareNode6 = (TParE)nodeArrayList4.get(0);
        pexplogicNode7 = (PExplogic)nodeArrayList5.get(0);
        tpardNode8 = (TParD)nodeArrayList6.get(0);
        tsemicolonNode9 = (TSemicolon)nodeArrayList7.get(0);

        pcommandNode1 = new ARepeatCommand(trepitaNode2, listNode4, tateNode5, tpareNode6, pexplogicNode7, tpardNode8, tsemicolonNode9);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AForCommand */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TPara tparaNode2;
        PVar pvarNode3;
        TDe tdeNode4;
        TNInt tnintNode5;
        TAte tateNode6;
        TNInt tnintNode7;
        TFaca tfacaNode8;
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TFimPara tfimparaNode11;
        TSemicolon tsemicolonNode12;
        tparaNode2 = (TPara)nodeArrayList1.get(0);
        pvarNode3 = (PVar)nodeArrayList2.get(0);
        tdeNode4 = (TDe)nodeArrayList3.get(0);
        tnintNode5 = (TNInt)nodeArrayList4.get(0);
        tateNode6 = (TAte)nodeArrayList5.get(0);
        tnintNode7 = (TNInt)nodeArrayList6.get(0);
        tfacaNode8 = (TFaca)nodeArrayList7.get(0);
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList8.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        tfimparaNode11 = (TFimPara)nodeArrayList9.get(0);
        tsemicolonNode12 = (TSemicolon)nodeArrayList10.get(0);

        pcommandNode1 = new AForCommand(tparaNode2, pvarNode3, tdeNode4, tnintNode5, tateNode6, tnintNode7, tfacaNode8, listNode10, tfimparaNode11, tsemicolonNode12);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AForPassoCommand */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TPara tparaNode2;
        PVar pvarNode3;
        TDe tdeNode4;
        TNInt tnintNode5;
        TPasso tpassoNode6;
        TNInt tnintNode7;
        TAte tateNode8;
        TNInt tnintNode9;
        TFaca tfacaNode10;
        LinkedList<Object> listNode12 = new LinkedList<Object>();
        TFimPara tfimparaNode13;
        TSemicolon tsemicolonNode14;
        tparaNode2 = (TPara)nodeArrayList1.get(0);
        pvarNode3 = (PVar)nodeArrayList2.get(0);
        tdeNode4 = (TDe)nodeArrayList3.get(0);
        tnintNode5 = (TNInt)nodeArrayList4.get(0);
        tpassoNode6 = (TPasso)nodeArrayList5.get(0);
        tnintNode7 = (TNInt)nodeArrayList6.get(0);
        tateNode8 = (TAte)nodeArrayList7.get(0);
        tnintNode9 = (TNInt)nodeArrayList8.get(0);
        tfacaNode10 = (TFaca)nodeArrayList9.get(0);
        {
            // Block
        LinkedList<Object> listNode11 = new LinkedList<Object>();
        listNode11 = (LinkedList)nodeArrayList10.get(0);
	if(listNode11 != null)
	{
	  listNode12.addAll(listNode11);
	}
        }
        tfimparaNode13 = (TFimPara)nodeArrayList11.get(0);
        tsemicolonNode14 = (TSemicolon)nodeArrayList12.get(0);

        pcommandNode1 = new AForPassoCommand(tparaNode2, pvarNode3, tdeNode4, tnintNode5, tpassoNode6, tnintNode7, tateNode8, tnintNode9, tfacaNode10, listNode12, tfimparaNode13, tsemicolonNode14);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AElsepart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElsepart pelsepartNode1;
        {
            // Block
        TSenao tsenaoNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tsenaoNode2 = (TSenao)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pelsepartNode1 = new AElsepart(tsenaoNode2, listNode4);
        }
	nodeList.add(pelsepartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ACasepart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCasepart pcasepartNode1;
        {
            // Block
        TCaso tcasoNode2;
        PValor pvalorNode3;
        TDoisPontos tdoispontosNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tcasoNode2 = (TCaso)nodeArrayList1.get(0);
        pvalorNode3 = (PValor)nodeArrayList2.get(0);
        tdoispontosNode4 = (TDoisPontos)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pcasepartNode1 = new ACasepart(tcasoNode2, pvalorNode3, tdoispontosNode4, listNode6);
        }
	nodeList.add(pcasepartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AElseswitch */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseswitch pelseswitchNode1;
        {
            // Block
        TSenao tsenaoNode2;
        TDoisPontos tdoispontosNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tsenaoNode2 = (TSenao)nodeArrayList1.get(0);
        tdoispontosNode3 = (TDoisPontos)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pelseswitchNode1 = new AElseswitch(tsenaoNode2, tdoispontosNode3, listNode5);
        }
	nodeList.add(pelseswitchNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AExpSumExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TMais tmaisNode3;
        PTerm ptermNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tmaisNode3 = (TMais)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pexpNode1 = new AExpSumExp(pexpNode2, tmaisNode3, ptermNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AExpSubExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TMenos tmenosNode3;
        PTerm ptermNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tmenosNode3 = (TMenos)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pexpNode1 = new AExpSubExp(pexpNode2, tmenosNode3, ptermNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AExpTermExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pexpNode1 = new AExpTermExp(ptermNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AExplist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExplist pexplistNode1;
        {
            // Block
        PExp pexpNode2;
        TVirgula tvirgulaNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tvirgulaNode3 = (TVirgula)nodeArrayList2.get(0);

        pexplistNode1 = new AExplist(pexpNode2, tvirgulaNode3);
        }
	nodeList.add(pexplistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ATermMultTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        TMult tmultNode3;
        PFactor pfactorNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        ptermNode1 = new ATermMultTerm(ptermNode2, tmultNode3, pfactorNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ATermDivTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        TDivisao tdivisaoNode3;
        PFactor pfactorNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tdivisaoNode3 = (TDivisao)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        ptermNode1 = new ATermDivTerm(ptermNode2, tdivisaoNode3, pfactorNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ATermFactorTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        ptermNode1 = new ATermFactorTerm(pfactorNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AValorFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PValor pvalorNode2;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);

        pfactorNode1 = new AValorFactor(pvalorNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AVarFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pfactorNode1 = new AVarFactor(pvarNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AParExpFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TParE tpareNode2;
        PExp pexpNode3;
        TParD tpardNode4;
        tpareNode2 = (TParE)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tpardNode4 = (TParD)nodeArrayList3.get(0);

        pfactorNode1 = new AParExpFactor(tpareNode2, pexpNode3, tpardNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AOrExplogic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExplogic pexplogicNode1;
        {
            // Block
        PExp pexpNode2;
        TOu touNode3;
        PTermlogic ptermlogicNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        touNode3 = (TOu)nodeArrayList2.get(0);
        ptermlogicNode4 = (PTermlogic)nodeArrayList3.get(0);

        pexplogicNode1 = new AOrExplogic(pexpNode2, touNode3, ptermlogicNode4);
        }
	nodeList.add(pexplogicNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AXorExplogic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExplogic pexplogicNode1;
        {
            // Block
        PExp pexpNode2;
        TXor txorNode3;
        PTermlogic ptermlogicNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        txorNode3 = (TXor)nodeArrayList2.get(0);
        ptermlogicNode4 = (PTermlogic)nodeArrayList3.get(0);

        pexplogicNode1 = new AXorExplogic(pexpNode2, txorNode3, ptermlogicNode4);
        }
	nodeList.add(pexplogicNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ATermLogicExplogic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExplogic pexplogicNode1;
        {
            // Block
        PTermlogic ptermlogicNode2;
        ptermlogicNode2 = (PTermlogic)nodeArrayList1.get(0);

        pexplogicNode1 = new ATermLogicExplogic(ptermlogicNode2);
        }
	nodeList.add(pexplogicNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AAndTermlogic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermlogic ptermlogicNode1;
        {
            // Block
        PTermlogic ptermlogicNode2;
        TE teNode3;
        PFactorlogic pfactorlogicNode4;
        ptermlogicNode2 = (PTermlogic)nodeArrayList1.get(0);
        teNode3 = (TE)nodeArrayList2.get(0);
        pfactorlogicNode4 = (PFactorlogic)nodeArrayList3.get(0);

        ptermlogicNode1 = new AAndTermlogic(ptermlogicNode2, teNode3, pfactorlogicNode4);
        }
	nodeList.add(ptermlogicNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AFactorLogicTermlogic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermlogic ptermlogicNode1;
        {
            // Block
        PFactorlogic pfactorlogicNode2;
        pfactorlogicNode2 = (PFactorlogic)nodeArrayList1.get(0);

        ptermlogicNode1 = new AFactorLogicTermlogic(pfactorlogicNode2);
        }
	nodeList.add(ptermlogicNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ANotFactorlogic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactorlogic pfactorlogicNode1;
        {
            // Block
        TNao tnaoNode2;
        PExprelational pexprelationalNode3;
        tnaoNode2 = (TNao)nodeArrayList1.get(0);
        pexprelationalNode3 = (PExprelational)nodeArrayList2.get(0);

        pfactorlogicNode1 = new ANotFactorlogic(tnaoNode2, pexprelationalNode3);
        }
	nodeList.add(pfactorlogicNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AParExpFactorlogic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactorlogic pfactorlogicNode1;
        {
            // Block
        TParE tpareNode2;
        PExplogic pexplogicNode3;
        TParD tpardNode4;
        tpareNode2 = (TParE)nodeArrayList1.get(0);
        pexplogicNode3 = (PExplogic)nodeArrayList2.get(0);
        tpardNode4 = (TParD)nodeArrayList3.get(0);

        pfactorlogicNode1 = new AParExpFactorlogic(tpareNode2, pexplogicNode3, tpardNode4);
        }
	nodeList.add(pfactorlogicNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AExpRelationalFactorlogic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactorlogic pfactorlogicNode1;
        {
            // Block
        PExprelational pexprelationalNode2;
        pexprelationalNode2 = (PExprelational)nodeArrayList1.get(0);

        pfactorlogicNode1 = new AExpRelationalFactorlogic(pexprelationalNode2);
        }
	nodeList.add(pfactorlogicNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AExprelational */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprelational pexprelationalNode1;
        {
            // Block
        PExp pexpNode2;
        POperator poperatorNode3;
        PExp pexpNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        poperatorNode3 = (POperator)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pexprelationalNode1 = new AExprelational(pexpNode2, poperatorNode3, pexpNode4);
        }
	nodeList.add(pexprelationalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AIgualOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        TIgual tigualNode2;
        tigualNode2 = (TIgual)nodeArrayList1.get(0);

        poperatorNode1 = new AIgualOperator(tigualNode2);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ADiferenteOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        TDiferente tdiferenteNode2;
        tdiferenteNode2 = (TDiferente)nodeArrayList1.get(0);

        poperatorNode1 = new ADiferenteOperator(tdiferenteNode2);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AMaiorOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        TMaior tmaiorNode2;
        tmaiorNode2 = (TMaior)nodeArrayList1.get(0);

        poperatorNode1 = new AMaiorOperator(tmaiorNode2);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AMenorOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        TMenor tmenorNode2;
        tmenorNode2 = (TMenor)nodeArrayList1.get(0);

        poperatorNode1 = new AMenorOperator(tmenorNode2);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AMaiorIgualOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        TMaiorIgual tmaiorigualNode2;
        tmaiorigualNode2 = (TMaiorIgual)nodeArrayList1.get(0);

        poperatorNode1 = new AMaiorIgualOperator(tmaiorigualNode2);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AMenorIgualOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        TMenorIgual tmenorigualNode2;
        tmenorigualNode2 = (TMenorIgual)nodeArrayList1.get(0);

        poperatorNode1 = new AMenorIgualOperator(tmenorigualNode2);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ATerminal$Decl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDecl pdeclNode1;
        pdeclNode1 = (PDecl)nodeArrayList1.get(0);
	if(pdeclNode1 != null)
	{
	  listNode2.add(pdeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ANonTerminal$Decl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDecl pdeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclNode2 = (PDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclNode2 != null)
	{
	  listNode3.add(pdeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ATerminal$Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PCommand pcommandNode1;
        pcommandNode1 = (PCommand)nodeArrayList1.get(0);
	if(pcommandNode1 != null)
	{
	  listNode2.add(pcommandNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ANonTerminal$Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PCommand pcommandNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcommandNode2 = (PCommand)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommandNode2 != null)
	{
	  listNode3.add(pcommandNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ATerminal$Varlist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVarlist pvarlistNode1;
        pvarlistNode1 = (PVarlist)nodeArrayList1.get(0);
	if(pvarlistNode1 != null)
	{
	  listNode2.add(pvarlistNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce ANonTerminal$Varlist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVarlist pvarlistNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvarlistNode2 = (PVarlist)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvarlistNode2 != null)
	{
	  listNode3.add(pvarlistNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ATerminal$Explist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExplist pexplistNode1;
        pexplistNode1 = (PExplist)nodeArrayList1.get(0);
	if(pexplistNode1 != null)
	{
	  listNode2.add(pexplistNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ANonTerminal$Explist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExplist pexplistNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexplistNode2 = (PExplist)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexplistNode2 != null)
	{
	  listNode3.add(pexplistNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ATerminal$Casepart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PCasepart pcasepartNode1;
        pcasepartNode1 = (PCasepart)nodeArrayList1.get(0);
	if(pcasepartNode1 != null)
	{
	  listNode2.add(pcasepartNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ANonTerminal$Casepart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PCasepart pcasepartNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcasepartNode2 = (PCasepart)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcasepartNode2 != null)
	{
	  listNode3.add(pcasepartNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {46, SHIFT, 4}, },
			{{-1, ERROR, 2}, {55, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 4}, {1, SHIFT, 5}, },
			{{-1, ERROR, 5}, {2, SHIFT, 6}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {21, SHIFT, 14}, {22, SHIFT, 15}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 7}, {39, SHIFT, 23}, },
			{{-1, ERROR, 8}, {39, SHIFT, 24}, },
			{{-1, ERROR, 9}, {39, SHIFT, 25}, },
			{{-1, ERROR, 10}, {39, SHIFT, 26}, },
			{{-1, ERROR, 11}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, ERROR, 12}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, ERROR, 13}, {39, SHIFT, 29}, },
			{{-1, ERROR, 14}, {46, SHIFT, 30}, },
			{{-1, ERROR, 15}, {44, SHIFT, 31}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 19}, {37, SHIFT, 32}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 21}, {2, SHIFT, 33}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {21, SHIFT, 14}, {22, SHIFT, 15}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, ERROR, 22}, {2, SHIFT, 36}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, ERROR, 23}, {39, SHIFT, 38}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 39}, {49, SHIFT, 40}, {50, SHIFT, 41}, },
			{{-1, ERROR, 24}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, ERROR, 25}, {36, SHIFT, 52}, {39, SHIFT, 53}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 39}, {49, SHIFT, 40}, {50, SHIFT, 41}, },
			{{-1, ERROR, 26}, {36, SHIFT, 52}, {39, SHIFT, 53}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 39}, {49, SHIFT, 40}, {50, SHIFT, 41}, },
			{{-1, ERROR, 27}, {12, SHIFT, 60}, },
			{{-1, ERROR, 28}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {15, SHIFT, 61}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, ERROR, 29}, {39, SHIFT, 38}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 39}, {49, SHIFT, 40}, {50, SHIFT, 41}, },
			{{-1, ERROR, 30}, {48, SHIFT, 39}, {49, SHIFT, 40}, {50, SHIFT, 41}, },
			{{-1, ERROR, 31}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, ERROR, 32}, {39, SHIFT, 38}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 39}, {49, SHIFT, 40}, {50, SHIFT, 41}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 35}, {2, SHIFT, 67}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 38}, {39, SHIFT, 38}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 39}, {49, SHIFT, 40}, {50, SHIFT, 41}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 44}, {23, SHIFT, 69}, {24, SHIFT, 70}, {38, SHIFT, 71}, {43, SHIFT, 72}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 32}, {25, SHIFT, 73}, {26, SHIFT, 74}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 48}, {39, SHIFT, 38}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 39}, {49, SHIFT, 40}, {50, SHIFT, 41}, },
			{{-1, ERROR, 49}, {38, SHIFT, 77}, {43, SHIFT, 78}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 51}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, ERROR, 52}, {39, SHIFT, 38}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 39}, {49, SHIFT, 40}, {50, SHIFT, 41}, },
			{{-1, ERROR, 53}, {36, SHIFT, 52}, {39, SHIFT, 53}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 39}, {49, SHIFT, 40}, {50, SHIFT, 41}, },
			{{-1, ERROR, 54}, {23, SHIFT, 69}, {24, SHIFT, 70}, {27, SHIFT, 85}, {28, SHIFT, 86}, {29, SHIFT, 87}, {30, SHIFT, 88}, {31, SHIFT, 89}, {32, SHIFT, 90}, {34, SHIFT, 91}, {35, SHIFT, 92}, },
			{{-1, ERROR, 55}, {38, SHIFT, 94}, },
			{{-1, REDUCE, 42}, {33, SHIFT, 95}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 59}, {38, SHIFT, 96}, },
			{{-1, ERROR, 60}, {48, SHIFT, 97}, },
			{{-1, ERROR, 61}, {39, SHIFT, 98}, },
			{{-1, ERROR, 62}, {23, SHIFT, 69}, {24, SHIFT, 70}, {38, SHIFT, 99}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 64}, {43, SHIFT, 78}, {45, SHIFT, 100}, },
			{{-1, ERROR, 65}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, ERROR, 66}, {23, SHIFT, 69}, {24, SHIFT, 70}, {45, SHIFT, 102}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 68}, {23, SHIFT, 69}, {24, SHIFT, 70}, {38, SHIFT, 103}, },
			{{-1, ERROR, 69}, {39, SHIFT, 38}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 39}, {49, SHIFT, 40}, {50, SHIFT, 41}, },
			{{-1, ERROR, 70}, {39, SHIFT, 38}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 39}, {49, SHIFT, 40}, {50, SHIFT, 41}, },
			{{-1, ERROR, 71}, {45, SHIFT, 106}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 73}, {39, SHIFT, 38}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 39}, {49, SHIFT, 40}, {50, SHIFT, 41}, },
			{{-1, ERROR, 74}, {39, SHIFT, 38}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 39}, {49, SHIFT, 40}, {50, SHIFT, 41}, },
			{{-1, ERROR, 75}, {23, SHIFT, 69}, {24, SHIFT, 70}, {38, SHIFT, 109}, {43, SHIFT, 72}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 77}, {45, SHIFT, 110}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 79}, {38, SHIFT, 111}, {43, SHIFT, 78}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 81}, {23, SHIFT, 69}, {24, SHIFT, 70}, {27, SHIFT, 85}, {28, SHIFT, 86}, {29, SHIFT, 87}, {30, SHIFT, 88}, {31, SHIFT, 89}, {32, SHIFT, 90}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 83}, {23, SHIFT, 69}, {24, SHIFT, 70}, {27, SHIFT, 85}, {28, SHIFT, 86}, {29, SHIFT, 87}, {30, SHIFT, 88}, {31, SHIFT, 89}, {32, SHIFT, 90}, {34, SHIFT, 91}, {35, SHIFT, 92}, {38, SHIFT, 103}, },
			{{-1, ERROR, 84}, {38, SHIFT, 112}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 91}, {36, SHIFT, 52}, {39, SHIFT, 53}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 39}, {49, SHIFT, 40}, {50, SHIFT, 41}, },
			{{-1, ERROR, 92}, {36, SHIFT, 52}, {39, SHIFT, 53}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 39}, {49, SHIFT, 40}, {50, SHIFT, 41}, },
			{{-1, ERROR, 93}, {39, SHIFT, 38}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 39}, {49, SHIFT, 40}, {50, SHIFT, 41}, },
			{{-1, ERROR, 94}, {16, SHIFT, 116}, },
			{{-1, ERROR, 95}, {36, SHIFT, 52}, {39, SHIFT, 53}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 39}, {49, SHIFT, 40}, {50, SHIFT, 41}, },
			{{-1, ERROR, 96}, {8, SHIFT, 118}, },
			{{-1, ERROR, 97}, {13, SHIFT, 119}, {15, SHIFT, 120}, },
			{{-1, ERROR, 98}, {36, SHIFT, 52}, {39, SHIFT, 53}, {46, SHIFT, 16}, {47, SHIFT, 17}, {48, SHIFT, 39}, {49, SHIFT, 40}, {50, SHIFT, 41}, },
			{{-1, ERROR, 99}, {19, SHIFT, 122}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 101}, {43, SHIFT, 78}, {45, SHIFT, 125}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 30}, {25, SHIFT, 73}, {26, SHIFT, 74}, },
			{{-1, REDUCE, 31}, {25, SHIFT, 73}, {26, SHIFT, 74}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 109}, {45, SHIFT, 126}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 111}, {45, SHIFT, 127}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 40}, {33, SHIFT, 95}, },
			{{-1, REDUCE, 41}, {33, SHIFT, 95}, },
			{{-1, REDUCE, 48}, {23, SHIFT, 69}, {24, SHIFT, 70}, },
			{{-1, ERROR, 116}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 118}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, ERROR, 119}, {48, SHIFT, 130}, },
			{{-1, ERROR, 120}, {48, SHIFT, 131}, },
			{{-1, ERROR, 121}, {38, SHIFT, 132}, },
			{{-1, ERROR, 122}, {48, SHIFT, 39}, {49, SHIFT, 40}, {50, SHIFT, 41}, },
			{{-1, REDUCE, 63}, },
			{{-1, ERROR, 124}, {9, SHIFT, 134}, {19, SHIFT, 122}, {20, SHIFT, 135}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 128}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {6, SHIFT, 138}, {7, SHIFT, 10}, {11, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, ERROR, 129}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {9, SHIFT, 139}, {10, SHIFT, 140}, {11, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, ERROR, 130}, {15, SHIFT, 142}, },
			{{-1, ERROR, 131}, {16, SHIFT, 143}, },
			{{-1, ERROR, 132}, {45, SHIFT, 144}, },
			{{-1, ERROR, 133}, {44, SHIFT, 145}, },
			{{-1, ERROR, 134}, {44, SHIFT, 146}, },
			{{-1, ERROR, 135}, {45, SHIFT, 147}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 137}, {20, SHIFT, 148}, },
			{{-1, ERROR, 138}, {45, SHIFT, 149}, },
			{{-1, ERROR, 139}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, ERROR, 140}, {45, SHIFT, 151}, },
			{{-1, ERROR, 141}, {10, SHIFT, 152}, },
			{{-1, ERROR, 142}, {48, SHIFT, 153}, },
			{{-1, ERROR, 143}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 145}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, ERROR, 146}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 148}, {45, SHIFT, 157}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 27}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 152}, {45, SHIFT, 158}, },
			{{-1, ERROR, 153}, {16, SHIFT, 159}, },
			{{-1, ERROR, 154}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {14, SHIFT, 160}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, REDUCE, 28}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, REDUCE, 29}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 159}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, ERROR, 160}, {45, SHIFT, 162}, },
			{{-1, ERROR, 161}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {7, SHIFT, 10}, {11, SHIFT, 11}, {14, SHIFT, 163}, {17, SHIFT, 12}, {18, SHIFT, 13}, {46, SHIFT, 16}, {47, SHIFT, 17}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 163}, {45, SHIFT, 164}, },
			{{-1, REDUCE, 26}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 18}, {21, 34}, },
			{{-1, 19}, {11, 27}, {23, 42}, {24, 49}, {25, 42}, {26, 42}, {29, 42}, {31, 64}, {32, 42}, {38, 42}, {48, 42}, {51, 79}, {52, 42}, {53, 42}, {65, 101}, {69, 42}, {70, 42}, {73, 42}, {74, 42}, {91, 42}, {92, 42}, {93, 42}, {95, 42}, {98, 42}, },
			{{-1, 50}, {51, 80}, {65, 80}, },
			{{-1, 43}, {30, 63}, {122, 133}, },
			{{-1, 20}, {22, 37}, {28, 37}, {35, 37}, {128, 37}, {129, 37}, {150, 37}, {154, 37}, {155, 37}, {156, 37}, {161, 37}, },
			{{-1, 141}, },
			{{-1, 123}, {124, 136}, },
			{{-1, 137}, },
			{{-1, 81}, {23, 44}, {25, 54}, {26, 54}, {29, 62}, {32, 66}, {38, 68}, {48, 75}, {53, 83}, {93, 115}, {98, 54}, },
			{{-1, 45}, {48, 76}, },
			{{-1, 46}, {69, 104}, {70, 105}, },
			{{-1, 47}, {73, 107}, {74, 108}, },
			{{-1, 55}, {26, 59}, {53, 84}, {98, 121}, },
			{{-1, 56}, {91, 113}, {92, 114}, },
			{{-1, 57}, {95, 117}, },
			{{-1, 58}, {52, 82}, },
			{{-1, 93}, },
			{{-1, 21}, },
			{{-1, 22}, {12, 28}, {21, 35}, {116, 128}, {118, 129}, {139, 150}, {143, 154}, {145, 155}, {146, 156}, {159, 161}, },
			{{-1, 51}, {31, 65}, },
			{{-1, 48}, },
			{{-1, 124}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'programa'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'inicio'",
			"expecting: 'fim.', 'escreva', 'leia', 'enquanto', 'se', 'para', 'repita', 'avalie', 'const', tipo, id, id array",
			"expecting: '('",
			"expecting: id, id array",
			"expecting: 'escreva', 'leia', 'enquanto', 'se', 'para', 'repita', 'avalie', id, id array",
			"expecting: ':'",
			"expecting: 'de', '+', '-', '/', '*', '=', '<>', '>', '<', '<=', '>=', 'e', 'ou', 'xor', '<-', ')', ',', ';'",
			"expecting: '<-'",
			"expecting: 'fim.', 'escreva', 'leia', 'enquanto', 'fim enquanto', 'se', 'senao', 'fim se', 'para', 'fim para', 'ate', 'repita', 'avalie', 'caso', 'fim avalie', id, id array",
			"expecting: 'fim.', 'escreva', 'leia', 'enquanto', 'se', 'para', 'repita', 'avalie', id, id array",
			"expecting: '(', id, id array, n int, n real, string",
			"expecting: 'nao', '(', id, id array, n int, n real, string",
			"expecting: 'de'",
			"expecting: 'escreva', 'leia', 'enquanto', 'se', 'para', 'ate', 'repita', 'avalie', id, id array",
			"expecting: n int, n real, string",
			"expecting: 'fim.', 'escreva', 'leia', 'enquanto', 'se', 'para', 'repita', 'avalie', 'const', tipo, '+', '-', '/', '*', '=', '<>', '>', '<', '<=', '>=', 'e', 'ou', 'xor', ')', ',', ':', ';', id, id array",
			"expecting: '+', '-', '/', '*', '=', '<>', '>', '<', '<=', '>=', 'e', 'ou', 'xor', ')', ',', ';'",
			"expecting: '+', '-', ')', ','",
			"expecting: ')', ','",
			"expecting: '+', '-', '=', '<>', '>', '<', '<=', '>=', 'ou', 'xor'",
			"expecting: ')'",
			"expecting: 'e', ')'",
			"expecting: n int",
			"expecting: '+', '-', ')'",
			"expecting: ',', ';'",
			"expecting: '+', '-', ';'",
			"expecting: ';'",
			"expecting: '+', '-', '=', '<>', '>', '<', '<=', '>='",
			"expecting: '+', '-', '=', '<>', '>', '<', '<=', '>=', 'ou', 'xor', ')'",
			"expecting: 'faca'",
			"expecting: 'entao'",
			"expecting: 'passo', 'ate'",
			"expecting: 'caso'",
			"expecting: '+', '-', 'e', ')'",
			"expecting: 'senao', 'caso', 'fim avalie'",
			"expecting: 'escreva', 'leia', 'enquanto', 'fim enquanto', 'se', 'para', 'repita', 'avalie', id, id array",
			"expecting: 'escreva', 'leia', 'enquanto', 'se', 'senao', 'fim se', 'para', 'repita', 'avalie', id, id array",
			"expecting: 'ate'",
			"expecting: 'fim avalie'",
			"expecting: 'fim se'",
			"expecting: 'escreva', 'leia', 'enquanto', 'se', 'fim se', 'para', 'repita', 'avalie', id, id array",
			"expecting: 'escreva', 'leia', 'enquanto', 'se', 'para', 'fim para', 'repita', 'avalie', id, id array",
			"expecting: 'escreva', 'leia', 'enquanto', 'se', 'senao', 'para', 'repita', 'avalie', 'caso', 'fim avalie', id, id array",
			"expecting: 'escreva', 'leia', 'enquanto', 'se', 'para', 'repita', 'avalie', 'fim avalie', id, id array",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 4, 2, 5, 5, 5, 5, 6, 7, 5, 1, 8, 9, 9, 4, 10, 11, 4, 12, 13, 6, 14, 14, 15, 16, 13, 17, 6, 13, 2, 4, 12, 2, 11, 13, 18, 18, 18, 19, 19, 20, 13, 19, 19, 13, 21, 6, 6, 13, 14, 22, 23, 24, 24, 24, 23, 25, 5, 26, 4, 27, 6, 28, 2, 26, 13, 13, 29, 13, 13, 13, 20, 13, 29, 6, 21, 6, 30, 24, 31, 23, 13, 13, 13, 13, 13, 13, 14, 14, 13, 32, 14, 33, 34, 14, 35, 4, 27, 11, 19, 19, 19, 11, 19, 19, 29, 11, 29, 24, 24, 24, 36, 7, 24, 7, 25, 25, 23, 17, 37, 37, 4, 11, 11, 38, 39, 40, 32, 29, 8, 8, 29, 37, 41, 29, 7, 29, 42, 25, 7, 11, 7, 7, 11, 29, 11, 43, 11, 29, 32, 44, 45, 46, 11, 11, 7, 29, 44, 11, 29, 11, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
