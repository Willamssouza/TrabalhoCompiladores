/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class ASomaExpAdditive extends PExpAdditive
{
    private PExpAdditive _expAdditive_;
    private TMais _mais_;
    private PExpMultiplicative _expMultiplicative_;

    public ASomaExpAdditive()
    {
        // Constructor
    }

    public ASomaExpAdditive(
        @SuppressWarnings("hiding") PExpAdditive _expAdditive_,
        @SuppressWarnings("hiding") TMais _mais_,
        @SuppressWarnings("hiding") PExpMultiplicative _expMultiplicative_)
    {
        // Constructor
        setExpAdditive(_expAdditive_);

        setMais(_mais_);

        setExpMultiplicative(_expMultiplicative_);

    }

    @Override
    public Object clone()
    {
        return new ASomaExpAdditive(
            cloneNode(this._expAdditive_),
            cloneNode(this._mais_),
            cloneNode(this._expMultiplicative_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASomaExpAdditive(this);
    }

    public PExpAdditive getExpAdditive()
    {
        return this._expAdditive_;
    }

    public void setExpAdditive(PExpAdditive node)
    {
        if(this._expAdditive_ != null)
        {
            this._expAdditive_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expAdditive_ = node;
    }

    public TMais getMais()
    {
        return this._mais_;
    }

    public void setMais(TMais node)
    {
        if(this._mais_ != null)
        {
            this._mais_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mais_ = node;
    }

    public PExpMultiplicative getExpMultiplicative()
    {
        return this._expMultiplicative_;
    }

    public void setExpMultiplicative(PExpMultiplicative node)
    {
        if(this._expMultiplicative_ != null)
        {
            this._expMultiplicative_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expMultiplicative_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expAdditive_)
            + toString(this._mais_)
            + toString(this._expMultiplicative_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expAdditive_ == child)
        {
            this._expAdditive_ = null;
            return;
        }

        if(this._mais_ == child)
        {
            this._mais_ = null;
            return;
        }

        if(this._expMultiplicative_ == child)
        {
            this._expMultiplicative_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._expAdditive_ == oldChild)
        {
            setExpAdditive((PExpAdditive) newChild);
            return;
        }

        if(this._mais_ == oldChild)
        {
            setMais((TMais) newChild);
            return;
        }

        if(this._expMultiplicative_ == oldChild)
        {
            setExpMultiplicative((PExpMultiplicative) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
