/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AOuConditionalOr extends PConditionalOr
{
    private PConditionalOr _conditionalOr_;
    private TOu _ou_;
    private PConditionalAnd _conditionalAnd_;

    public AOuConditionalOr()
    {
        // Constructor
    }

    public AOuConditionalOr(
        @SuppressWarnings("hiding") PConditionalOr _conditionalOr_,
        @SuppressWarnings("hiding") TOu _ou_,
        @SuppressWarnings("hiding") PConditionalAnd _conditionalAnd_)
    {
        // Constructor
        setConditionalOr(_conditionalOr_);

        setOu(_ou_);

        setConditionalAnd(_conditionalAnd_);

    }

    @Override
    public Object clone()
    {
        return new AOuConditionalOr(
            cloneNode(this._conditionalOr_),
            cloneNode(this._ou_),
            cloneNode(this._conditionalAnd_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOuConditionalOr(this);
    }

    public PConditionalOr getConditionalOr()
    {
        return this._conditionalOr_;
    }

    public void setConditionalOr(PConditionalOr node)
    {
        if(this._conditionalOr_ != null)
        {
            this._conditionalOr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionalOr_ = node;
    }

    public TOu getOu()
    {
        return this._ou_;
    }

    public void setOu(TOu node)
    {
        if(this._ou_ != null)
        {
            this._ou_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ou_ = node;
    }

    public PConditionalAnd getConditionalAnd()
    {
        return this._conditionalAnd_;
    }

    public void setConditionalAnd(PConditionalAnd node)
    {
        if(this._conditionalAnd_ != null)
        {
            this._conditionalAnd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionalAnd_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._conditionalOr_)
            + toString(this._ou_)
            + toString(this._conditionalAnd_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._conditionalOr_ == child)
        {
            this._conditionalOr_ = null;
            return;
        }

        if(this._ou_ == child)
        {
            this._ou_ = null;
            return;
        }

        if(this._conditionalAnd_ == child)
        {
            this._conditionalAnd_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._conditionalOr_ == oldChild)
        {
            setConditionalOr((PConditionalOr) newChild);
            return;
        }

        if(this._ou_ == oldChild)
        {
            setOu((TOu) newChild);
            return;
        }

        if(this._conditionalAnd_ == oldChild)
        {
            setConditionalAnd((PConditionalAnd) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
