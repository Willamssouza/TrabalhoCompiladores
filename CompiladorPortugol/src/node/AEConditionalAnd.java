/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AEConditionalAnd extends PConditionalAnd
{
    private PConditionalAnd _conditionalAnd_;
    private TE _e_;
    private PConditionalXor _conditionalXor_;

    public AEConditionalAnd()
    {
        // Constructor
    }

    public AEConditionalAnd(
        @SuppressWarnings("hiding") PConditionalAnd _conditionalAnd_,
        @SuppressWarnings("hiding") TE _e_,
        @SuppressWarnings("hiding") PConditionalXor _conditionalXor_)
    {
        // Constructor
        setConditionalAnd(_conditionalAnd_);

        setE(_e_);

        setConditionalXor(_conditionalXor_);

    }

    @Override
    public Object clone()
    {
        return new AEConditionalAnd(
            cloneNode(this._conditionalAnd_),
            cloneNode(this._e_),
            cloneNode(this._conditionalXor_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEConditionalAnd(this);
    }

    public PConditionalAnd getConditionalAnd()
    {
        return this._conditionalAnd_;
    }

    public void setConditionalAnd(PConditionalAnd node)
    {
        if(this._conditionalAnd_ != null)
        {
            this._conditionalAnd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionalAnd_ = node;
    }

    public TE getE()
    {
        return this._e_;
    }

    public void setE(TE node)
    {
        if(this._e_ != null)
        {
            this._e_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._e_ = node;
    }

    public PConditionalXor getConditionalXor()
    {
        return this._conditionalXor_;
    }

    public void setConditionalXor(PConditionalXor node)
    {
        if(this._conditionalXor_ != null)
        {
            this._conditionalXor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionalXor_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._conditionalAnd_)
            + toString(this._e_)
            + toString(this._conditionalXor_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._conditionalAnd_ == child)
        {
            this._conditionalAnd_ = null;
            return;
        }

        if(this._e_ == child)
        {
            this._e_ = null;
            return;
        }

        if(this._conditionalXor_ == child)
        {
            this._conditionalXor_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._conditionalAnd_ == oldChild)
        {
            setConditionalAnd((PConditionalAnd) newChild);
            return;
        }

        if(this._e_ == oldChild)
        {
            setE((TE) newChild);
            return;
        }

        if(this._conditionalXor_ == oldChild)
        {
            setConditionalXor((PConditionalXor) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
