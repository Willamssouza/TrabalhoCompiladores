/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AExpLogic extends PExpLogic
{
    private PConditionalOr _conditionalOr_;

    public AExpLogic()
    {
        // Constructor
    }

    public AExpLogic(
        @SuppressWarnings("hiding") PConditionalOr _conditionalOr_)
    {
        // Constructor
        setConditionalOr(_conditionalOr_);

    }

    @Override
    public Object clone()
    {
        return new AExpLogic(
            cloneNode(this._conditionalOr_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExpLogic(this);
    }

    public PConditionalOr getConditionalOr()
    {
        return this._conditionalOr_;
    }

    public void setConditionalOr(PConditionalOr node)
    {
        if(this._conditionalOr_ != null)
        {
            this._conditionalOr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionalOr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._conditionalOr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._conditionalOr_ == child)
        {
            this._conditionalOr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._conditionalOr_ == oldChild)
        {
            setConditionalOr((PConditionalOr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
