/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import java.util.*;
import analysis.*;

@SuppressWarnings("nls")
public final class ASwitchCommand extends PCommand
{
    private TAvalie _avalie_;
    private TParE _parE_;
    private PExpression _expression_;
    private TParD _parD_;
    private final LinkedList<PCasepart> _casepart_ = new LinkedList<PCasepart>();
    private PElseswitch _elseswitch_;
    private TFimAvalie _fimAvalie_;
    private TSemicolon _semicolon_;

    public ASwitchCommand()
    {
        // Constructor
    }

    public ASwitchCommand(
        @SuppressWarnings("hiding") TAvalie _avalie_,
        @SuppressWarnings("hiding") TParE _parE_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TParD _parD_,
        @SuppressWarnings("hiding") List<?> _casepart_,
        @SuppressWarnings("hiding") PElseswitch _elseswitch_,
        @SuppressWarnings("hiding") TFimAvalie _fimAvalie_,
        @SuppressWarnings("hiding") TSemicolon _semicolon_)
    {
        // Constructor
        setAvalie(_avalie_);

        setParE(_parE_);

        setExpression(_expression_);

        setParD(_parD_);

        setCasepart(_casepart_);

        setElseswitch(_elseswitch_);

        setFimAvalie(_fimAvalie_);

        setSemicolon(_semicolon_);

    }

    @Override
    public Object clone()
    {
        return new ASwitchCommand(
            cloneNode(this._avalie_),
            cloneNode(this._parE_),
            cloneNode(this._expression_),
            cloneNode(this._parD_),
            cloneList(this._casepart_),
            cloneNode(this._elseswitch_),
            cloneNode(this._fimAvalie_),
            cloneNode(this._semicolon_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASwitchCommand(this);
    }

    public TAvalie getAvalie()
    {
        return this._avalie_;
    }

    public void setAvalie(TAvalie node)
    {
        if(this._avalie_ != null)
        {
            this._avalie_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._avalie_ = node;
    }

    public TParE getParE()
    {
        return this._parE_;
    }

    public void setParE(TParE node)
    {
        if(this._parE_ != null)
        {
            this._parE_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parE_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public TParD getParD()
    {
        return this._parD_;
    }

    public void setParD(TParD node)
    {
        if(this._parD_ != null)
        {
            this._parD_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parD_ = node;
    }

    public LinkedList<PCasepart> getCasepart()
    {
        return this._casepart_;
    }

    public void setCasepart(List<?> list)
    {
        for(PCasepart e : this._casepart_)
        {
            e.parent(null);
        }
        this._casepart_.clear();

        for(Object obj_e : list)
        {
            PCasepart e = (PCasepart) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._casepart_.add(e);
        }
    }

    public PElseswitch getElseswitch()
    {
        return this._elseswitch_;
    }

    public void setElseswitch(PElseswitch node)
    {
        if(this._elseswitch_ != null)
        {
            this._elseswitch_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elseswitch_ = node;
    }

    public TFimAvalie getFimAvalie()
    {
        return this._fimAvalie_;
    }

    public void setFimAvalie(TFimAvalie node)
    {
        if(this._fimAvalie_ != null)
        {
            this._fimAvalie_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fimAvalie_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return this._semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(this._semicolon_ != null)
        {
            this._semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semicolon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._avalie_)
            + toString(this._parE_)
            + toString(this._expression_)
            + toString(this._parD_)
            + toString(this._casepart_)
            + toString(this._elseswitch_)
            + toString(this._fimAvalie_)
            + toString(this._semicolon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._avalie_ == child)
        {
            this._avalie_ = null;
            return;
        }

        if(this._parE_ == child)
        {
            this._parE_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._parD_ == child)
        {
            this._parD_ = null;
            return;
        }

        if(this._casepart_.remove(child))
        {
            return;
        }

        if(this._elseswitch_ == child)
        {
            this._elseswitch_ = null;
            return;
        }

        if(this._fimAvalie_ == child)
        {
            this._fimAvalie_ = null;
            return;
        }

        if(this._semicolon_ == child)
        {
            this._semicolon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._avalie_ == oldChild)
        {
            setAvalie((TAvalie) newChild);
            return;
        }

        if(this._parE_ == oldChild)
        {
            setParE((TParE) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._parD_ == oldChild)
        {
            setParD((TParD) newChild);
            return;
        }

        for(ListIterator<PCasepart> i = this._casepart_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PCasepart) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._elseswitch_ == oldChild)
        {
            setElseswitch((PElseswitch) newChild);
            return;
        }

        if(this._fimAvalie_ == oldChild)
        {
            setFimAvalie((TFimAvalie) newChild);
            return;
        }

        if(this._semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
