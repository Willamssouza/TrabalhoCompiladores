/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AParExpFactorlogic extends PFactorlogic
{
    private TParE _parE_;
    private PExplogic _explogic_;
    private TParD _parD_;

    public AParExpFactorlogic()
    {
        // Constructor
    }

    public AParExpFactorlogic(
        @SuppressWarnings("hiding") TParE _parE_,
        @SuppressWarnings("hiding") PExplogic _explogic_,
        @SuppressWarnings("hiding") TParD _parD_)
    {
        // Constructor
        setParE(_parE_);

        setExplogic(_explogic_);

        setParD(_parD_);

    }

    @Override
    public Object clone()
    {
        return new AParExpFactorlogic(
            cloneNode(this._parE_),
            cloneNode(this._explogic_),
            cloneNode(this._parD_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAParExpFactorlogic(this);
    }

    public TParE getParE()
    {
        return this._parE_;
    }

    public void setParE(TParE node)
    {
        if(this._parE_ != null)
        {
            this._parE_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parE_ = node;
    }

    public PExplogic getExplogic()
    {
        return this._explogic_;
    }

    public void setExplogic(PExplogic node)
    {
        if(this._explogic_ != null)
        {
            this._explogic_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._explogic_ = node;
    }

    public TParD getParD()
    {
        return this._parD_;
    }

    public void setParD(TParD node)
    {
        if(this._parD_ != null)
        {
            this._parD_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parD_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._parE_)
            + toString(this._explogic_)
            + toString(this._parD_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._parE_ == child)
        {
            this._parE_ = null;
            return;
        }

        if(this._explogic_ == child)
        {
            this._explogic_ = null;
            return;
        }

        if(this._parD_ == child)
        {
            this._parD_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._parE_ == oldChild)
        {
            setParE((TParE) newChild);
            return;
        }

        if(this._explogic_ == oldChild)
        {
            setExplogic((PExplogic) newChild);
            return;
        }

        if(this._parD_ == oldChild)
        {
            setParD((TParD) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
