/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import java.util.*;
import analysis.*;

@SuppressWarnings("nls")
public final class ARepeatCommand extends PCommand
{
    private TRepita _repita_;
    private final LinkedList<PCommand> _command_ = new LinkedList<PCommand>();
    private TAte _ate_;
    private TParE _parE_;
    private PExplogic _explogic_;
    private TParD _parD_;
    private TSemicolon _semicolon_;

    public ARepeatCommand()
    {
        // Constructor
    }

    public ARepeatCommand(
        @SuppressWarnings("hiding") TRepita _repita_,
        @SuppressWarnings("hiding") List<?> _command_,
        @SuppressWarnings("hiding") TAte _ate_,
        @SuppressWarnings("hiding") TParE _parE_,
        @SuppressWarnings("hiding") PExplogic _explogic_,
        @SuppressWarnings("hiding") TParD _parD_,
        @SuppressWarnings("hiding") TSemicolon _semicolon_)
    {
        // Constructor
        setRepita(_repita_);

        setCommand(_command_);

        setAte(_ate_);

        setParE(_parE_);

        setExplogic(_explogic_);

        setParD(_parD_);

        setSemicolon(_semicolon_);

    }

    @Override
    public Object clone()
    {
        return new ARepeatCommand(
            cloneNode(this._repita_),
            cloneList(this._command_),
            cloneNode(this._ate_),
            cloneNode(this._parE_),
            cloneNode(this._explogic_),
            cloneNode(this._parD_),
            cloneNode(this._semicolon_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARepeatCommand(this);
    }

    public TRepita getRepita()
    {
        return this._repita_;
    }

    public void setRepita(TRepita node)
    {
        if(this._repita_ != null)
        {
            this._repita_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._repita_ = node;
    }

    public LinkedList<PCommand> getCommand()
    {
        return this._command_;
    }

    public void setCommand(List<?> list)
    {
        for(PCommand e : this._command_)
        {
            e.parent(null);
        }
        this._command_.clear();

        for(Object obj_e : list)
        {
            PCommand e = (PCommand) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._command_.add(e);
        }
    }

    public TAte getAte()
    {
        return this._ate_;
    }

    public void setAte(TAte node)
    {
        if(this._ate_ != null)
        {
            this._ate_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ate_ = node;
    }

    public TParE getParE()
    {
        return this._parE_;
    }

    public void setParE(TParE node)
    {
        if(this._parE_ != null)
        {
            this._parE_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parE_ = node;
    }

    public PExplogic getExplogic()
    {
        return this._explogic_;
    }

    public void setExplogic(PExplogic node)
    {
        if(this._explogic_ != null)
        {
            this._explogic_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._explogic_ = node;
    }

    public TParD getParD()
    {
        return this._parD_;
    }

    public void setParD(TParD node)
    {
        if(this._parD_ != null)
        {
            this._parD_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parD_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return this._semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(this._semicolon_ != null)
        {
            this._semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semicolon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._repita_)
            + toString(this._command_)
            + toString(this._ate_)
            + toString(this._parE_)
            + toString(this._explogic_)
            + toString(this._parD_)
            + toString(this._semicolon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._repita_ == child)
        {
            this._repita_ = null;
            return;
        }

        if(this._command_.remove(child))
        {
            return;
        }

        if(this._ate_ == child)
        {
            this._ate_ = null;
            return;
        }

        if(this._parE_ == child)
        {
            this._parE_ = null;
            return;
        }

        if(this._explogic_ == child)
        {
            this._explogic_ = null;
            return;
        }

        if(this._parD_ == child)
        {
            this._parD_ = null;
            return;
        }

        if(this._semicolon_ == child)
        {
            this._semicolon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._repita_ == oldChild)
        {
            setRepita((TRepita) newChild);
            return;
        }

        for(ListIterator<PCommand> i = this._command_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PCommand) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._ate_ == oldChild)
        {
            setAte((TAte) newChild);
            return;
        }

        if(this._parE_ == oldChild)
        {
            setParE((TParE) newChild);
            return;
        }

        if(this._explogic_ == oldChild)
        {
            setExplogic((PExplogic) newChild);
            return;
        }

        if(this._parD_ == oldChild)
        {
            setParD((TParD) newChild);
            return;
        }

        if(this._semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
